%%% ## Author: Syed Faraz Abrar
%%% ## Twitter: https://twitter.com/farazsth98
%%% ## Description: Grammar for fuzzing JavaScript

%const% MAX_REPEAT_POWER := 3
%const% VARIANCE_MIN := 150
%const% VARIANCE_MAX := 250
%const% VARIABLE_MIN := 1
%const% VARIABLE_MAX := 1

%%% ###########################################################################
%%% ###########################################################################
%%% ####### VALUE SECTION
%%% ####### Only define values here
%%% ####### Use and assign value in declarations as follows: +value+
%%% ####### Use variables in statements as follows: !variable!.bar();
%%% ###########################################################################
%%% ###########################################################################

%section% := value

%%% ######## Generic Values ########

smallIntegers :=
	%range%(-64-64)

integers :=
	%range%(-9223372036854775808-92233782036854775807)

smallUnsigned := 
	%range%(0-64)

unsigned :=
	%range%(0-18446744073709551615)

smallFloats :=
	%range%(-64.0-64.0)

floats :=
	%range%(-9223372036854775808.0-92233782036854775807.0)

smallNumbers :=
	+smallIntegers+
	+smallUnsigned+
	+smallFloats+

numbers :=
	+integers+
	+unsigned+
	+floats+

strings :=
	%range%(a-z)
	%range%(A-Z)
	%range%(0-9)
	%repeat%(+strings+)

properties :=
	%range%(a-z)
	%range%(A-Z)

booleans :=
	true
	false

objects :=
	{}
	{ %repeat%(+properties+: +integers+, ", ") }
	{ %repeat%(+properties+: +unsigned+, ", ") }
	{ %repeat%(+properties+: +floats+, ", ") }
	{ %repeat%(+properties+: +numbers+, ", ") }
	{ %repeat%(+properties+: +arrays+, ", ") }
	{ %repeat%(+properties+: {}, ", ") }

arrays :=
	[]
	[%repeat%(+integers+, ", ")]
	[%repeat%(+unsigned+, ", ")]
	[%repeat%(+floats+, ", ")]
	[%repeat%(+objects+, ", ")]
	(new +TypedArrayNames+(%repeat%(+integers+, ", ")))
	(new +TypedArrayNames+(%repeat%(+unsigned+, ", ")))
	(new +TypedArrayNames+(%repeat%(+floats+, ", ")))
	(new +TypedArrayNames+(%repeat%(+numbers+, ", ")))

all :=
	+integers+
	+floats+
	"+strings+"
	+booleans+
	+object+
	+arrays+
	!str!
	!obj!
	!arr!
	+others+

others :=
	NaN
	undefined
	null

sizes :=
	%range%(0-64)

charCodes :=
	0x%range%(0x0-0xff)
	+charCodes+, +charCodes+

codePoints :=
	%range%(0-999999)

twoIntArgs :=
	%range%(0-64), %range%(0-64)

threeIntArgs :=
	%range%(0-64), %range%(0-64), %range%(0-64)
	
twoFloatArgs :=
	%range%(0.0-64.0), %range%(0.0-64.0)

threeFloatArgs :=
	%range%(0.0-64.0), %range%(0.0-64.0), %range%(0.0-64.0)

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Callback Functions ########
%%% ##############################################################################################
%%% ##############################################################################################

genericEmptyFunc :=
	function() {}

genericFuncOneArg :=
	function(element) { element.+arrayMethods+; }
	function(element) { element.+DataViewMethods+; }

genericFuncOneArgCmp :=
	function(element) { element < +integers+; }
	function(element) { element <= +integers+; }
	function(element) { element >= +integers+; }
	function(element) { element > +integers+; }

genericFuncOneArgNumOp :=
	function(element) { element + +integers+; }
	function(element) { element - +integers+; }
	function(element) { element * +integers+; }
	function(element) { element / +integers+; }
	function(element) { element ^ +integers+; }

genericFuncTwoArgs :=
	function(acc, element) { acc.+JSArrayInPlaceMethodNames+(element); }
	function(acc, element) { acc.+JSArrayForLoopUnsafeNames+(element); }

genericFuncTwoArgsCmp :=
	function(c_first, c_second) { c_first < c_second; }
	function(c_first, c_second) { c_first <= c_second; }
	function(c_first, c_second) { c_first >= c_second; }
	function(c_first, c_second) { c_first > c_second; }

genericFuncTwoArgsNumOp :=
	function(acc, element) { acc + element; }
	function(acc, element) { acc - element; }
	function(acc, element) { acc * element; }
	function(acc, element) { acc / element; }
	function(acc, element) { acc ^ element; }

genericFuncThreeArgs :=
	function(c_val, c_index, c_array) { c_array[c_index] = c_array.+arrayMethods+; }
	function(c_val, c_index, c_array) { c_array[c_index] = c_val.+arrayMethods+; }
	function(c_val, c_index, c_array) { c_val = c_array.+arrayMethods+; }
	function(c_val, c_index, c_array) { c_val = c_val.+arrayMethods+; }

genericFuncFourArgs :=
	function(acc, cval, c_index, c_array) { c_array[c_index] = c_array.+arrayMethods+; }
	function(acc, cval, c_index, c_array) { c_array[c_index] = c_val.+arrayMethods+; }
	function(acc, cval, c_index, c_array) { c_val = c_array.+arrayMethods+; }
	function(acc, cval, c_index, c_array) { c_val = c_val.+arrayMethods+; }

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## JSArrays ########
%%% ## https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array ##
%%% ##############################################################################################
%%% ##############################################################################################

%%% #############################################
%%% ######## Wrappers around all methods ########
%%% #############################################

arrayMethodNames :=
	+JSArrayCallbackMethodNames+
	+JSArrayInPlaceMethodNames+
	+JSArrayForLoopUnsafeNames+

arrayMethods :=
	+JSArrayCallbackMethod+
	+JSArrayInPlaceMethod+
	+JSArrayForLoopUnsafe+

arrayMethodsForLoop :=
	+JSArrayCallbackMethod+
	+JSArrayInPlaceMethod+

%%% ########################################
%%% ######## Methods with callbacks ########
%%% ########################################

%%% ########################################
%%% ######## Names and Declarations ########
%%% ########################################

JSArrayCallbackMethodNames :=
	every
	filter
	find
	findIndex
	flatMap
	forEach
	map
	reduce
	reduceRight
	some
	sort

JSArrayCallbackMethod :=
	+every+
	+filter+
	+find+
	+findIndex+
	+flatMap+
	+forEach+
	+map+
	+reduce+
	+reduceRight+
%%%	+some+
	+sort+

%%% ######## Implementations ########

every :=
	every()
	every(+genericEmptyFunc+)
	every(+genericFuncOneArgCmp+)
	every(+genericFuncThreeArgs+)

filter :=
	filter()
	filter(+genericEmptyFunc+)
	filter(+genericFuncOneArgCmp+)
	filter(+genericFuncThreeArgs+)

find :=
	find()
	find(+genericEmptyFunc+)
	find(+genericFuncOneArgCmp+)
	find(+genericFuncThreeArgs+)

findIndex :=
	findIndex()
	findIndex(+genericEmptyFunc+)
	findIndex(+genericFuncOneArgCmp+)
	findIndex(+genericFuncThreeArgs+)

flatMap :=
	flatMap()
	flatMap(+genericEmptyFunc+)
	flatMap(+genericFuncOneArg+)
	flatMap(+genericFuncOneArgNumOp+)
	flatMap(+genericFuncThreeArgs+)

forEach :=
	forEach()
	forEach(+genericEmptyFunc+)
	forEach(+genericFuncOneArg+)
	forEach(+genericFuncThreeArgs+)

map :=
	map(+genericEmptyFunc+)
	map(+genericFuncOneArg+)
	map(+genericFuncOneArgNumOp+)
	map(+genericFuncThreeArgs+)

reduce :=
	reduce()
	reduce(+genericFuncTwoArgs+)
	reduce(+genericFuncTwoArgsNumOp+)
	reduce(+genericFuncFourArgs+)

reduceRight :=
	reduceRight()
	reduceRight(+genericFuncTwoArgs+)
	reduceRight(+genericFuncTwoArgsNumOp+)
	reduceRight(+genericFuncFourArgs+)

some :=
	some()
	some(+genericEmptyFunc+)
	some(+genericFuncOneArgCmp+)
	some(+genericFuncThreeArgs+)

sort :=
	sort()
	sort(+genericEmptyFunc+)
	sort(+genericFuncTwoArgsCmp+)
	sort(+genericFuncThreeArgs+)
	
%%% #############################################
%%% ######## Methods that occur in-place ########
%%% #############################################

%%% ########################################
%%% ######## Names and Declarations ########
%%% ########################################

JSArrayForLoopUnsafeNames :=
	push
	splice
	unshift
	concat

JSArrayForLoopUnsafe :=
	+push+
	+splice+
	+unshift+
	+concat+

JSArrayInPlaceMethodNames :=
	copyWithin
	entries
	fill
	flat
	includes
	indexOf
	join
	keys
	lastIndexOf
	pop
	reverse
	shift
	slice
%%%	toLocaleString
	toString
%%%	values

JSArrayInPlaceMethod :=
	+copyWithin+
	+entries+
	+fill+
	+flat+
	+includes+
	+indexOf+
	+join+
	+keys+
	+lastIndexOf+
	+pop+
	+reverse+
	+shift+
	+slice+
%%%	+toLocaleString+
	+toString+
%%%	+values+

%%% #################################
%%% ######## Implementations ########
%%% #################################

concat :=
	concat()
	concat(!arr!)
	concat(!obj!)

copyWithin :=
	copyWithin(+twoIntArgs+)
	copyWithin(+threeIntArgs+)

flat :=
	flat()
	flat(+all+)

entries :=
	entries()
	entries(%repeat%(+all+, ", "))

fill :=
	fill(+all+)
	fill(+all+, +twoIntArgs+)

includes :=
	includes(+all+)
	includes(+all+, +smallUnsigned+)

indexOf :=
	indexOf(+all+)
	indexOf(+all+, +smallUnsigned+)

join :=
	join()
	join(+all+)

keys :=
	keys()
	keys(%repeat%(+all+, ", "))

lastIndexOf :=
	lastIndexOf(+all+)
	lastIndexOf(+all+, +smallUnsigned+)

pop :=
	pop()
	pop(%repeat%(+all+, ", "))

push :=
	push()
	push(%repeat%(+all+, ", "))

reverse :=
	reverse()
	reverse(%repeat%(+all+, ", "))

shift :=
	shift()
	shift(%repeat%(+all+, ", "))

slice :=
	slice()
	slice(+smallUnsigned+)
	slice(+smallUnsigned+, +smallUnsigned+)

splice :=
	splice()
	splice(+smallUnsigned+)
	splice(+smallUnsigned+, +smallUnsigned+)
	splice(+smallUnsigned+, +smallUnsigned+, %repeat%(+all+, ", "))

toString :=
	toString()
	toString(%repeat%(+all+, ", "))

unshift :=
	unshift()
	unshift(%repeat%(+all+, ", "))

values :=
	values()
	values(%repeat%(+all+, ", "))
	
%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## DataViews ########
%%% ### https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView
%%% ##############################################################################################
%%% ##############################################################################################

DataViewSetArgs :=
	+booleans+
	+integers+
	+floats+
	+all+

DataViewGetMethods :=
    getFloat32
    getFloat64
    getInt16
    getInt32
    getInt8
    getUint16
    getUint32
    getUint8

DataViewSetMethods :=
    setFloat32
    setFloat64
    setInt16
    setInt32
    setInt8
    setUint16
    setUint32
    setUint8

DataViewMethods :=
	+DataViewGetMethods+(%range%(0-8), +booleans+)
	+DataViewGetMethods+(%range%(0-8), +booleans+)
	+DataViewSetMethods+(%range%(0-8), +DataViewSetArgs+, +booleans+)
	+DataViewSetMethods+(%range%(0-8), +DataViewSetArgs+, +others+)

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Object ########
%%% ### https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object
%%% ##############################################################################################
%%% ##############################################################################################

ObjectMethodNames :=
	Object.assign
	Object.create
	Object.defineProperties
	Object.defineProperty
	Object.entries
	Object.freeze
	Object.fromEntries
	Object.getOwnPropertyDescriptor
	Object.getOwnPropertyDescriptors
	Object.getOwnPropertyNames
	Object.getOwnPropertySymbols
	Object.getPrototypeOf
	Object.is
	Object.isExtensible
	Object.isFrozen
	Object.isSealed
	Object.keys
	Object.preventExtensions
	Object.seal
	Object.setPrototypeOf
	Object.values

assign :=
	assign(+initializableObjects+, +objects+)
	assign(+initializableObjects+, %repeat%(+objects+))

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## TypedArrays ########
%%% ### https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
%%% ##############################################################################################
%%% ##############################################################################################

TypedArrayNames :=
	Int8Array
	Uint8Array
	Uint8ClampedArray
	Int16Array
	Uint16Array
	Int32Array
	Uint32Array
	Float32Array
	Float64Array
	BigInt64Array
	BigUint64Array

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Interactions ########
%%% ##############################################################################################
%%% ##############################################################################################

DataViewInteractions :=
	!dv!.+DataViewMethods+
	!dv![i] = !dv!.+DataViewMethods+
	!dv!.+arrayMethods+
	!dv![i] = !dv!.+arrayMethods+

DataViewForLoopInteractions :=
	!dv!.+DataViewMethods+
	!dv![i] = !dv!.+DataViewMethods+
	!dv!.+arrayMethodsForLoop+
	!dv![i] = !dv!.+arrayMethodsForLoop+

ArrayInteractions :=
	!arr!.+arrayMethods+
	!arr![i] = !arr!.+arrayMethods+
	!arr![i].+arrayMethods+
	!arr![i] = !arr![i].+arrayMethods+
	!t_arr!.+arrayMethods+
	!t_arr![i] = !t_arr!.+arrayMethods+
	!t_arr![i].+arrayMethods+
	!t_arr![i] = !t_arr![i].+arrayMethods+
	!obj!.+arrayMethods+
	!obj![i] = !obj!.+arrayMethods+
	!obj![i].+arrayMethods+
	!obj![i] = !obj![i].+arrayMethods+

ArrayForLoopInteractions :=
	!arr!.+arrayMethodsForLoop+
	!arr![i] = !arr!.+arrayMethodsForLoop+
	!arr![i].+arrayMethodsForLoop+
	!arr![i] = !arr![i].+arrayMethodsForLoop+
	!t_arr!.+arrayMethodsForLoop+
	!t_arr![i] = !t_arr!.+arrayMethodsForLoop+
	!t_arr![i].+arrayMethodsForLoop+
	!t_arr![i] = !t_arr![i].+arrayMethodsForLoop+
	!obj!.+arrayMethodsForLoop+
	!obj![i] = !obj!.+arrayMethodsForLoop+
	!obj![i].+arrayMethodsForLoop+
	!obj![i] = !obj![i].+arrayMethodsForLoop+

ObjectInteractions :=
	Object.+assign+
%%%	Object.+defineProperties+
%%%	Object.+defineProperty+
%%%	Object.+entries+
%%%	Object.+freeze+
%%%	Object.+fromEntries+
%%%	Object.+getOwnPropertyDescriptor+
%%%	Object.+getOwnPropertyDescriptors+
%%%	Object.+getOwnPropertyNames+
%%%	Object.+getOwnPropertySymbols+
%%%	Object.+getPrototypeOf+
%%%	Object.+is+
%%%	Object.+isExtensible+
%%%	Object.+isFrozen+
%%%	Object.+isSealed+
%%%	Object.+keys+
%%%	Object.+preventExtensions+
%%%	Object.+seal+
%%%	Object.+setPrototypeOf+
%%%	Object.+values+

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Wrappers ########
%%% ##############################################################################################
%%% ##############################################################################################

initializableObjects :=
	!arr!
	!t_arr!
	!dv!
	!obj!
	!buf!

forLoopInit :=
	for (var i = 0; i < !arr!.length; i++) { !arr![i] = +all+; }
	for (var i = 0; i < !t_arr!.length; i++) { !t_arr![i] = +all+; }
	for (var i = 0; i < !dv!.length; i++) { !dv![i] = +all+; }
	for (var i = 0; i < !obj!.length; i++) { !obj![i] = +all+; }
	for (var i = 0; i < +smallUnsigned+; i++) { +initializableObjects+[i] = +all+; }

forLoops :=
	for (var i = 0; i < +smallUnsigned+; i++) { +forLoopInteractions+ }
	+forLoopInit+

forLoopInteractions :=
	try { +ArrayForLoopInteractions+; } catch (e) {}
	try { +DataViewForLoopInteractions+; } catch (e) {}

interactions :=
	+ArrayInteractions+;
	+DataViewInteractions+;
	+ObjectInteractions+;

wrapper :=
	try { +interactions+ } catch (e) {}
	try { +forLoops+ } catch (e) {}

%%% ###########################################################################
%%% ###########################################################################
%%% ####### VARIABLE SECTION
%%% ####### Only assign variables in this section
%%% ####### For example: @var@ = 42;
%%% ###########################################################################
%%% ###########################################################################

%section% := variable

str :=
	try { var @str@ = "+strings+"; } catch (e) {}
	try { var @str@ = String.fromCharCode(+charCodes+); } catch (e) {}
	try { var @str@ = String.fromCodePoint(+codePoints+); } catch (e) {}

obj :=
	try { var @obj@ = {}; } catch (e) {}
	try { var @obj@ = {%repeat%(+properties+: +all+, ", ")}; } catch (e) {}
	try { var @obj@ = Object.create(null); } catch (e) {}
	try { var @obj@ = Object.create(!str!); } catch (e) {}
	try { var @obj@ = Object.create(!arr!); } catch (e) {}
	try { var @obj@ = Object.create(!t_arr!); } catch (e) {}
	try { var @obj@ = Object.create(!dv!); } catch (e) {}

arr :=
	try { var @arr@ = new Array(+sizes+); } catch (e) {}
	try { var @arr@ = new Array(%repeat%(+floats+, ", ")); } catch (e) {}
	try { var @arr@ = new Array(%repeat%(+all+, ", ")); } catch (e) {}
	try { var @arr@ = Array.of(%repeat%(+unsigned+, ", ")); } catch (e) {}
	try { var @arr@ = Array.of(%repeat%(+floats+, ", ")); } catch (e) {}
	try { var @arr@ = Array.of(%repeat%(+all+, ", ")); } catch (e) {}

t_arr :=
	try { var @t_arr@ = new +TypedArrayNames+(+sizes+); } catch (e) {}
	try { var @t_arr@ = new +TypedArrayNames+(!buf!); } catch (e) {}

buf :=
	try { var @buf@ = new ArrayBuffer(+sizes+); } catch (e) {}

dv :=
	try { var @dv@ = new DataView(!buf!); } catch (e) {}
	try { var @dv@ = new DataView(!buf!, +smallUnsigned+, +smallUnsigned+); } catch (e) {}

iter :=
	try { var @iter@ = +initializableObjects+.entries(); } catch (e) {}
	try { var @iter@ = +initializableObjects+.keys(); } catch (e) {}
	try { var @iter@ = +initializableObjects+.values(); } catch (e) {}

%%% ###########################################################################
%%% ###########################################################################
%%% ####### VARIANCE SECTION
%%% ###########################################################################
%%% ###########################################################################

%section% := variance

main :=
	+wrapper+
