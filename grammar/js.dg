%%% ## Author: Syed Faraz Abrar
%%% ## Twitter: https://twitter.com/farazsth98
%%% ## Description: Grammar for fuzzing JavaScript engines

%const% MAX_REPEAT_POWER := 3
%const% VARIANCE_MIN := 150
%const% VARIANCE_MAX := 250
%const% VARIABLE_MIN := 1
%const% VARIABLE_MAX := 1

%%% ###########################################################################
%%% ###########################################################################
%%% ####### VALUE SECTION
%%% ####### Only define values here
%%% ####### Use and assign value in declarations as follows: +value+
%%% ####### Use variables in statements as follows: !variable!.bar();
%%% ###########################################################################
%%% ###########################################################################

%section% := value

%%% ######## Generic Values ########

smallIntegers :=
	%range%(-64-64)

integers :=
	%range%(-9223372036854775808-92233782036854775807)

smallUnsigned := 
	%range%(0-64)

unsigned :=
	%range%(0-18446744073709551615)

smallFloats :=
	%range%(-64.0-64.0)

floats :=
	%range%(-9223372036854775808.0-92233782036854775807.0)

smallNumbers :=
	+smallIntegers+
	+smallUnsigned+
	+smallFloats+

numbers :=
	+integers+
	+unsigned+
	+floats+

stringChars :=
	%range%(a-z)
	%range%(A-Z)
	%range%(0-9)

strings :=
	"%repeat%(+stringChars+)"

propertyNames :=
	%range%(a-z)%range%(a-z)%range%(a-z)

booleans :=
	true
	false

props :=
	"+propertyNames+": +integers+
    "+propertyNames+": +unsigned+
    "+propertyNames+": +floats+
    "+propertyNames+": +numbers+
    "+propertyNames+": +arrays+
    "+propertyNames+": +objects+

objects :=
	{}
	{ %repeat%(+props+, ", ") }
	+arrayBuffers+
	+dataViews+
	+maps+
	!obj!

objectsExpr :=
	var tempObj = {}; tempObj
	var tempObj = { %repeat%(+props+, ", ") }; tempObj
	+arrayBuffersExpr+
	+dataViewsExpr+
	+mapsExpr+
	!obj!

arrayBuffers :=
	(new ArrayBuffer(+smallUnsigned+))
	!buf!

arrayBuffersExpr :=
	var tempBuf = new ArrayBuffer(+smallUnsigned+); tempBuf
	!buf!
	
dataViews :=
	(new DataView(new ArrayBuffer(+smallUnsigned+)))
	(new DataView(new ArrayBuffer(+smallUnsigned+), +smallUnsigned+, +smallUnsigned+))
	!dv!

dataViewsExpr :=
	var tempDv = new DataView(new ArrayBuffer(+smallUnsigned+)); tempDv
	var tempDv = new DataView(new ArrayBuffer(+smallUnsigned+), +smallUnsigned+, +smallUnsigned+); tempDv
	!dv!

maps :=
	new Map(+MapConstructorArguments+)
	!map!

mapsExpr :=
	var tempMap = new Map(+MapConstructorArguments+); tempMap
	!map!

arrayElements :=
	+integers+
	+unsigned+
	+floats+
	+objects+
	+arraysCopy+
	+typedArraysCopy+

arrays :=
	[]
	[%repeat%(+integers+, ", ")]
	[%repeat%(+unsigned+, ", ")]
	[%repeat%(+floats+, ", ")]
	[%repeat%(+objects+, ", ")]
	[%repeat%(+arraysCopy+, ", ")]
	(new Array([%repeat%(+integers+, ", ")])) 
	(new Array([%repeat%(+unsigned+, ", ")]))
	(new Array([%repeat%(+floats+, ", ")]))
	(new Array([%repeat%(+objects+, ", ")]))
	(new Array([%repeat%(+arraysCopy+, ", ")]))
	(new Array([%repeat%(+typedArraysCopy+, ", ")]))
	(new Array([%repeat%(+arrayElements+, ", ")]))
	!arr!

arraysExpr :=
	[]
	[%repeat%(+integers+, ", ")]
	[%repeat%(+unsigned+, ", ")]
	[%repeat%(+floats+, ", ")]
	[%repeat%(+objects+, ", ")]
	[%repeat%(+arraysCopy+, ", ")]
	var tempArray = new Array([%repeat%(+integers+, ", ")]); tempArray
	var tempArray = new Array([%repeat%(+unsigned+, ", ")]); tempArray
	var tempArray = new Array([%repeat%(+floats+, ", ")]); tempArray
	var tempArray = new Array([%repeat%(+objects+, ", ")]); tempArray
	var tempArray = new Array([%repeat%(+arraysCopy+, ", ")]); tempArray
	var tempArray = new Array([%repeat%(+typedArraysCopy+, ", ")]); tempArray
	var tempArray = new Array([%repeat%(+arrayElements+, ", ")]); tempArray
	!arr!

typedArrays :=
	(new +TypedArrayNames+([%repeat%(+integers+, ", ")]))
	(new +TypedArrayNames+([%repeat%(+unsigned+, ", ")]))
	(new +TypedArrayNames+([%repeat%(+floats+, ", ")]))
	(new +TypedArrayNames+([%repeat%(+numbers+, ", ")]))
	(new +TypedArrayNames+(+initializableObjects+))
	(new +TypedArrayNames+(+objects+))
	(new +TypedArrayNames+(!buf!))
	(new +TypedArrayNames+(+arrays+))
	(new +TypedArrayNames+(+typedArraysCopy+))
	!t_arr!

typedArraysExpr :=
	var tempTypedArray = new +TypedArrayNames+([%repeat%(+integers+, ", ")]); tempTypedArray
	var tempTypedArray = new +TypedArrayNames+([%repeat%(+unsigned+, ", ")]); tempTypedArray
	var tempTypedArray = new +TypedArrayNames+([%repeat%(+floats+, ", ")]); tempTypedArray
	var tempTypedArray = new +TypedArrayNames+([%repeat%(+numbers+, ", ")]); tempTypedArray
	var tempTypedArray = new +TypedArrayNames+(+initializableObjects+); tempTypedArray
	var tempTypedArray = new +TypedArrayNames+(+objects+); tempTypedArray
	var tempTypedArray = new +TypedArrayNames+(!buf!); tempTypedArray
	var tempTypedArray = new +TypedArrayNames+(+arrays+); tempTypedArray
	var tempTypedArray = new +TypedArrayNames+(+typedArraysCopy+); tempTypedArray
	!t_arr!

%%% These copies are to prevent recursion

arraysCopy :=
	[]
	[%repeat%(+integers+, ", ")]
	[%repeat%(+unsigned+, ", ")]
	[%repeat%(+floats+, ", ")]
	[%repeat%(+objects+, ", ")]

typedArraysCopy :=
	(new +TypedArrayNames+([%repeat%(+integers+, ", ")]))
	(new +TypedArrayNames+([%repeat%(+unsigned+, ", ")]))
	(new +TypedArrayNames+([%repeat%(+floats+, ", ")]))
	(new +TypedArrayNames+([%repeat%(+numbers+, ", ")]))
	(new +TypedArrayNames+(+initializableObjects+))
	(new +TypedArrayNames+(+objects+))
	(new +TypedArrayNames+(+arrays+))
	!t_arr!

others :=
	NaN
	undefined
	null

all :=
	+integers+
	+floats+
	+strings+
	+booleans+
	+objects+
	+arrays+
	+typedArrays+
	+maps+
	+dataViews+
	+arrayBuffers+
	+others+
	!str!

sizes :=
	%range%(0-64)

charCodes :=
	0x%range%(0x0-0xff)
	+charCodes+, +charCodes+

codePoints :=
	%range%(0-999999)

twoIntArgs :=
	%range%(0-64), %range%(0-64)

threeIntArgs :=
	%range%(0-64), %range%(0-64), %range%(0-64)
	
twoFloatArgs :=
	%range%(0.0-64.0), %range%(0.0-64.0)

threeFloatArgs :=
	%range%(0.0-64.0), %range%(0.0-64.0), %range%(0.0-64.0)

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Callback Functions ########
%%% ##############################################################################################
%%% ##############################################################################################

genericEmptyFunc :=
	function() {}

genericFuncOneArg :=
	function(element) { element.+arrayMethods+; }
	function(element) { element.+DataViewMethods+; }
	function(element) { let args = Array.prototype.slice.call(arguments, 1); args.+arrayMethods+; }
	function(element) { let args = Array.prototype.slice.call(arguments, 1); args.+DataViewMethods+; }
	function(element) { "use strict"; element.+arrayMethods+; }
	function(element) { "use strict"; element.+DataViewMethods+; }
	function(element) { "use strict"; let args = Array.prototype.slice.call(arguments, 1); args.+arrayMethods+; }
	function(element) { "use strict"; let args = Array.prototype.slice.call(arguments, 1); args.+DataViewMethods+; }

genericFuncOneArgCmp :=
	function(element) { element < +integers+; }
	function(element) { element <= +integers+; }
	function(element) { element >= +integers+; }
	function(element) { element > +integers+; }

genericFuncOneArgNumOp :=
	function(element) { element + +integers+; }
	function(element) { element - +integers+; }
	function(element) { element * +integers+; }
	function(element) { element / +integers+; }
	function(element) { element ^ +integers+; }

genericFuncTwoArgs :=
	function(acc, element) { acc.+JSArrayInPlaceMethodNames+(element); }
	function(acc, element) { acc.+JSArrayForLoopUnsafeNames+(element); }
	function(acc, element) { let args = Array.prototype.slice.call(arguments, 1); args.+JSArrayInPlaceMethodNames+(element); }
	function(acc, element) { let args = Array.prototype.slice.call(arguments, 1); args.+JSArrayForLoopUnsafeNames+(element); }
	function(acc, element) { "use strict"; acc.+JSArrayInPlaceMethodNames+(element); }
	function(acc, element) { "use strict"; acc.+JSArrayForLoopUnsafeNames+(element); }
	function(acc, element) { "use strict"; let args = Array.prototype.slice.call(arguments, 1); args.+JSArrayInPlaceMethodNames+(element); }
	function(acc, element) { "use strict"; let args = Array.prototype.slice.call(arguments, 1); args.+JSArrayForLoopUnsafeNames+(element); }

genericFuncTwoArgsCmp :=
	function(c_first, c_second) { c_first < c_second; }
	function(c_first, c_second) { c_first <= c_second; }
	function(c_first, c_second) { c_first >= c_second; }
	function(c_first, c_second) { c_first > c_second; }

genericFuncTwoArgsNumOp :=
	function(acc, element) { acc + element; }
	function(acc, element) { acc - element; }
	function(acc, element) { acc * element; }
	function(acc, element) { acc / element; }
	function(acc, element) { acc ^ element; }

genericFuncThreeArgs :=
	function(c_val, c_index, c_array) { c_array[c_index] = c_array.+arrayMethods+; }
	function(c_val, c_index, c_array) { c_array[c_index] = c_val.+arrayMethods+; }
	function(c_val, c_index, c_array) { let args = Array.prototype.slice.call(arguments, 1); c_array[c_index] = args.+arrayMethods+; }
	function(c_val, c_index, c_array) { c_val = c_array.+arrayMethods+; }
	function(c_val, c_index, c_array) { c_val = c_val.+arrayMethods+; }
	function(c_val, c_index, c_array) { let args = Array.prototype.slice.call(arguments, 1); c_val = args.+arrayMethods+; }
	function(c_val, c_index, c_array) { "use strict"; c_array[c_index] = c_array.+arrayMethods+; }
	function(c_val, c_index, c_array) { "use strict"; c_array[c_index] = c_val.+arrayMethods+; }
	function(c_val, c_index, c_array) { "use strict"; let args = Array.prototype.slice.call(arguments, 1); c_array[c_index] = args.+arrayMethods+; }
	function(c_val, c_index, c_array) { "use strict"; c_val = c_array.+arrayMethods+; }
	function(c_val, c_index, c_array) { "use strict"; c_val = c_val.+arrayMethods+; }
	function(c_val, c_index, c_array) { "use strict"; let args = Array.prototype.slice.call(arguments, 1); c_val = args.+arrayMethods+; }

genericFuncFourArgs :=
	function(acc, c_val, c_index, c_array) { c_array[c_index] = c_array.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { c_array[c_index] = c_val.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { let args = Array.prototype.slice.call(arguments, 1); c_array[c_index] = args.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { c_val = c_array.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { c_val = c_val.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { let args = Array.prototype.slice.call(arguments, 1); c_val = args.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { "use strict"; c_array[c_index] = c_array.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { "use strict"; c_array[c_index] = c_val.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { "use strict"; let args = Array.prototype.slice.call(arguments, 1); c_array[c_index] = args.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { "use strict"; c_val = c_array.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { "use strict"; c_val = c_val.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { "use strict"; let args = Array.prototype.slice.call(arguments, 1); c_val = args.+arrayMethods+; }

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## JSArrays ########
%%% ## https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array ##
%%% ##############################################################################################
%%% ##############################################################################################

%%% #############################################
%%% ######## Wrappers around all methods ########
%%% #############################################

arrayMethodNames :=
	+JSArrayCallbackMethodNames+
	+JSArrayInPlaceMethodNames+
	+JSArrayForLoopUnsafeNames+

arrayMethods :=
	+JSArrayCallbackMethod+
	+JSArrayInPlaceMethod+
	+JSArrayForLoopUnsafe+

arrayMethodsForLoop :=
	+JSArrayCallbackMethod+
	+JSArrayInPlaceMethod+

%%% ########################################
%%% ######## Methods with callbacks ########
%%% ########################################

%%% ########################################
%%% ######## Names and Declarations ########
%%% ########################################

JSArrayCallbackMethodNames :=
	every
	filter
	find
	findIndex
	flatMap
	forEach
	map
	reduce
	reduceRight
	some
	sort

JSArrayCallbackMethod :=
	+every+
	+filter+
	+find+
	+findIndex+
	+flatMap+
	+arrayForEach+
	+map+
	+reduce+
	+reduceRight+
%%%	+some+
	+sort+

%%% ######## Implementations ########

every :=
	every()
	every(+genericEmptyFunc+)
	every(+genericFuncOneArgCmp+)
	every(+genericFuncThreeArgs+)

filter :=
	filter()
	filter(+genericEmptyFunc+)
	filter(+genericFuncOneArgCmp+)
	filter(+genericFuncThreeArgs+)

find :=
	find()
	find(+genericEmptyFunc+)
	find(+genericFuncOneArgCmp+)
	find(+genericFuncThreeArgs+)

findIndex :=
	findIndex()
	findIndex(+genericEmptyFunc+)
	findIndex(+genericFuncOneArgCmp+)
	findIndex(+genericFuncThreeArgs+)

flatMap :=
	flatMap()
	flatMap(+genericEmptyFunc+)
	flatMap(+genericFuncOneArg+)
	flatMap(+genericFuncOneArgNumOp+)
	flatMap(+genericFuncThreeArgs+)

arrayForEach :=
	forEach()
	forEach(+genericEmptyFunc+)
	forEach(+genericFuncOneArg+)
	forEach(+genericFuncThreeArgs+)

map :=
	map(+genericEmptyFunc+)
	map(+genericFuncOneArg+)
	map(+genericFuncOneArgNumOp+)
	map(+genericFuncThreeArgs+)

reduce :=
	reduce()
	reduce(+genericFuncTwoArgs+)
	reduce(+genericFuncTwoArgsNumOp+)
	reduce(+genericFuncFourArgs+)

reduceRight :=
	reduceRight()
	reduceRight(+genericFuncTwoArgs+)
	reduceRight(+genericFuncTwoArgsNumOp+)
	reduceRight(+genericFuncFourArgs+)

some :=
	some()
	some(+genericEmptyFunc+)
	some(+genericFuncOneArgCmp+)
	some(+genericFuncThreeArgs+)

sort :=
	sort()
	sort(+genericEmptyFunc+)
	sort(+genericFuncTwoArgsCmp+)
	sort(+genericFuncThreeArgs+)
	
%%% #############################################
%%% ######## Methods that occur in-place ########
%%% #############################################

%%% ########################################
%%% ######## Names and Declarations ########
%%% ########################################

JSArrayForLoopUnsafeNames :=
	push
	splice
	unshift
	concat

JSArrayForLoopUnsafe :=
	+push+
	+splice+
	+unshift+
	+concat+

JSArrayInPlaceMethodNames :=
	copyWithin
	entries
	fill
	flat
	includes
	indexOf
	join
	keys
	lastIndexOf
	pop
	reverse
	shift
	slice
%%%	toLocaleString
	toString
%%%	values

JSArrayInPlaceMethod :=
	+copyWithin+
	+entries+
	+fill+
	+flat+
	+includes+
	+indexOf+
	+join+
	+keys+
	+lastIndexOf+
	+pop+
	+reverse+
	+shift+
	+slice+
%%%	+toLocaleString+
	+toString+
%%%	+values+

%%% #################################
%%% ######## Implementations ########
%%% #################################

concat :=
	concat()
	concat(!arr!)
	concat(!obj!)

copyWithin :=
	copyWithin(+twoIntArgs+)
	copyWithin(+threeIntArgs+)

flat :=
	flat()
	flat(+all+)

entries :=
	entries()
	entries(%repeat%(+all+, ", "))

fill :=
	fill(+all+)
	fill(+all+, +twoIntArgs+)

includes :=
	includes(+all+)
	includes(+all+, +smallUnsigned+)

indexOf :=
	indexOf(+all+)
	indexOf(+all+, +smallUnsigned+)

join :=
	join()
	join(+all+)

keys :=
	keys()
	keys(%repeat%(+all+, ", "))

lastIndexOf :=
	lastIndexOf(+all+)
	lastIndexOf(+all+, +smallUnsigned+)

pop :=
	pop()
	pop(%repeat%(+all+, ", "))

push :=
	push()
	push(%repeat%(+all+, ", "))

reverse :=
	reverse()
	reverse(%repeat%(+all+, ", "))

shift :=
	shift()
	shift(%repeat%(+all+, ", "))

slice :=
	slice()
	slice(+smallUnsigned+)
	slice(+smallUnsigned+, +smallUnsigned+)

splice :=
	splice()
	splice(+smallUnsigned+)
	splice(+smallUnsigned+, +smallUnsigned+)
	splice(+smallUnsigned+, +smallUnsigned+, %repeat%(+all+, ", "))

toString :=
	toString()
	toString(%repeat%(+all+, ", "))

unshift :=
	unshift()
	unshift(%repeat%(+all+, ", "))

values :=
	values()
	values(%repeat%(+all+, ", "))
	
%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## DataViews ########
%%% ### https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView
%%% ##############################################################################################
%%% ##############################################################################################

DataViewSetArgs :=
	+booleans+
	+integers+
	+floats+
	+all+

DataViewGetMethods :=
    getFloat32
    getFloat64
    getInt16
    getInt32
    getInt8
    getUint16
    getUint32
    getUint8

DataViewSetMethods :=
    setFloat32
    setFloat64
    setInt16
    setInt32
    setInt8
    setUint16
    setUint32
    setUint8

DataViewMethods :=
	+DataViewGetMethods+(%range%(0-8), +booleans+)
	+DataViewGetMethods+(%range%(0-8), +booleans+)
	+DataViewSetMethods+(%range%(0-8), +DataViewSetArgs+, +booleans+)
	+DataViewSetMethods+(%range%(0-8), +DataViewSetArgs+, +others+)

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Object ########
%%% ### https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object
%%% ##############################################################################################
%%% ##############################################################################################

ObjectMethodNames :=
	Object.assign
	Object.defineProperties
	Object.defineProperty
	Object.entries
	Object.freeze
	Object.fromEntries
	Object.getOwnPropertyDescriptor
	Object.getOwnPropertyDescriptors
	Object.getOwnPropertyNames
	Object.getOwnPropertySymbols
	Object.getPrototypeOf
	Object.is
	Object.isExtensible
	Object.isFrozen
	Object.isSealed
	Object.keys
	Object.preventExtensions
	Object.seal
	Object.setPrototypeOf
	Object.values

assign :=
	assign(+initializableObjects+, +objects+)
	assign(+initializableObjects+, %repeat%(+objects+, ", "))

descriptor :=
	{ value: +all+, writable: +booleans+, configurable: +booleans+, enumerable: +booleans+ }

defineProperties :=
	defineProperties(+initializableObjects+, %repeat%({"+propertyNames+": +descriptor+}, ", "))
	defineProperties(+objects+, %repeat%({"+propertyNames+": +descriptor+}, ", "))
	defineProperties(+arrays+, %repeat%({"+propertyNames+": +descriptor+}, ", "))

defineProperty :=
	defineProperty(+objects+, "+propertyNames+", %repeat%(+descriptor+, ", "))
	defineProperty(+arrays+, "+propertyNames+", %repeat%(+descriptor+, ", "))

freeze :=
	freeze(+initializableObjects+)
	freeze(+objects+)
	freeze(+arrays+)

fromEntries :=
	fromEntries(+maps+)
	fromEntries(+MapConstructorArguments+)

preventExtensions :=
	preventExtensions(+initializableObjects+)
	preventExtensions(+objects+)
	preventExtensions(+arrays+)

seal :=
	seal(+initializableObjects+)
	seal(+objects+)
	seal(+arrays+)

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## TypedArrays ########
%%% ### https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
%%% ##############################################################################################
%%% ##############################################################################################

TypedArrayNames :=
	Int8Array
	Uint8Array
	Uint8ClampedArray
	Int16Array
	Uint16Array
	Int32Array
	Uint32Array
	Float32Array
	Float64Array

TypedArrayMethods :=
	+arrayMethods+
	+subarray+
	+TypedArraySet+

TypedArrayMethodsForLoop :=
	+arrayMethodsForLoop+
	+subarray+
	+TypedArraySet+

subarray :=
	subarray()
	subarray(+smallUnsigned+)
	subarray(+smallUnsigned+, +smallUnsigned+)

TypedArraySet :=
	TypedArraySet(+arrays+)
	TypedArraySet(+arrays+, +smallUnsigned+)
	TypedArraySet(+typedArrays+)
	TypedArraySet(+typedArrays+, +smallUnsigned+)

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Map ########
%%% ### https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
%%% ##############################################################################################
%%% ##############################################################################################

MapConstructorArguments :=
	[%repeat%(["+propertyNames+", +all+], ", ")]
	[%repeat%([+smallUnsigned+, +all+], ", ")]
	[%repeat%([+unsigned+, +all+], ", ")]

MapMethods :=
	+clear+
	+mapDelete+
	+entries+
	+mapForEach+
	+mapGet+
	+mapHas+
	+keys+
	+mapSet+
	+values+

MapAccessors :=
	size

clear :=
	clear()

mapDelete :=
	delete("+propertyNames+")

mapForEach :=
	forEach()
	forEach(+genericEmptyFunc+)
	forEach(+genericFuncOneArg+)
	forEach(+genericFuncTwoArgs+)

mapGet :=
	get("+propertyNames+")

mapHas :=
	has("+propertyNames+")

mapSet :=
	set("+propertyNames+", +all+)

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Object specific interactions ########
%%% ##############################################################################################
%%% ##############################################################################################

DataViewInteractions :=
	!dv!.+DataViewMethods+
	!dv![i] = !dv!.+DataViewMethods+
	!dv!.+arrayMethods+
	!dv![i] = !dv!.+arrayMethods+

DataViewForLoopInteractions :=
	!dv!.+DataViewMethods+
	!dv![i] = !dv!.+DataViewMethods+
	!dv!.+arrayMethodsForLoop+
	!dv![i] = !dv!.+arrayMethodsForLoop+

ArrayInteractions :=
	!arr!.+arrayMethods+
	!arr![i] = !arr!.+arrayMethods+
	!arr![i].+arrayMethods+
	!arr![i] = !arr![i].+arrayMethods+
	!obj!.+arrayMethods+
	!obj![i] = !obj!.+arrayMethods+
	!obj![i].+arrayMethods+
	!obj![i] = !obj![i].+arrayMethods+

ArrayForLoopInteractions :=
	!arr!.+arrayMethodsForLoop+
	!arr![i] = !arr!.+arrayMethodsForLoop+
	!arr![i].+arrayMethodsForLoop+
	!arr![i] = !arr![i].+arrayMethodsForLoop+
	!obj!.+arrayMethodsForLoop+
	!obj![i] = !obj!.+arrayMethodsForLoop+
	!obj![i].+arrayMethodsForLoop+
	!obj![i] = !obj![i].+arrayMethodsForLoop+

TypedArrayInteractions :=
	+typedArraysExpr+.+TypedArrayMethods+
	+typedArraysExpr+[i] = +typedArrays+.+TypedArrayMethods+
	+typedArraysExpr+[i].+TypedArrayMethods+
	+typedArraysExpr+[i] = +typedArrays+[i].+TypedArrayMethods+

TypedArrayForLoopInteractions :=
	+typedArraysExpr+.+TypedArrayMethodsForLoop+
	+typedArraysExpr+[i] = +typedArrays+.+TypedArrayMethodsForLoop+
	+typedArraysExpr+[i].+TypedArrayMethodsForLoop+
	+typedArraysExpr+[i] = +typedArrays+[i].+TypedArrayMethodsForLoop+

ObjectInteractions :=
	Object.+assign+
	Object.+defineProperties+
	Object.+defineProperty+
%%%	Object.+entries+
	Object.+freeze+
	Object.+fromEntries+
%%%	Object.+getOwnPropertyDescriptor+
%%%	Object.+getOwnPropertyDescriptors+
%%%	Object.+getOwnPropertyNames+
%%%	Object.+getOwnPropertySymbols+
%%%	Object.+getPrototypeOf+
%%%	Object.+is+
%%%	Object.+isExtensible+
%%%	Object.+isFrozen+
%%%	Object.+isSealed+
%%%	Object.+keys+
	Object.+preventExtensions+
	Object.+seal+
%%%	Object.+setPrototypeOf+
%%%	Object.+values+

MapInteractions :=
	+mapsExpr+.+MapMethods+
	+mapsExpr+.+MapAccessors+

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Random Array-like Operations ########
%%% ##############################################################################################
%%% ##############################################################################################

interestingIndices :=
	+smallUnsigned+

arrayLikeObjects :=
	!arr!
	!t_arr!
	!obj!
	!buf!
	!dv!
	!map!
	+arraysExpr+
	+typedArraysExpr+
	+objectsExpr+
	+mapsExpr+
	+dataViewsExpr+
	+arrayBuffersExpr+

randomIndexInsertions :=
	+arrayLikeObjects+[+interestingIndices+] = +all+

interestingLengths :=
	+smallNumbers+
	+strings+
	+objects+
	+arrays+

randomLengthChanges :=
	+arrayLikeObjects+.length = +interestingLengths+

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Wrappers ########
%%% ##############################################################################################
%%% ##############################################################################################

initializableObjects :=
	!arr!
	!t_arr!
	!dv!
	!obj!
	!buf!
	!map!

allPrototypeMethods :=
	+arrayMethods+
	+TypedArrayMethods+
	+DataViewMethods+
	+MapMethods+

forLoopInit :=
	for (var i = 0; i < !arr!.length; i++) { !arr![i] = +all+; }
	for (var i = 0; i < !t_arr!.length; i++) { !t_arr![i] = +all+; }
	for (var i = 0; i < !dv!.length; i++) { !dv![i] = +all+; }
	for (var i = 0; i < !obj!.length; i++) { !obj![i] = +all+; }
	for (var i = 0; i < !buf!.length; i++) { !buf![i] = +all+; }
	for (var i = 0; i < !map!.length; i++) { !map![i] = +all+; }
	for (var i = 0; i < +smallUnsigned+; i++) { +initializableObjects+[i] = +all+; }

forInLoops :=
	for (var i in +initializableObjects+) { try { i.+allPrototypeMethods+; } catch (e) {} }
	for (var i in +objects+) { try { i.+allPrototypeMethods+; } catch (e) {} }
	for (var i in +arrays+) { try { i.+allPrototypeMethods+; } catch (e) {} }
	
forOfLoops :=
	for (var [i, j] of +initializableObjects+.entries()) { try { j.+allPrototypeMethods+; } catch(e) {}}
	for (var [i, j] of Object.entries(+initializableObjects+)) { try { j.+allPrototypeMethods+; } catch(e) {}}
	for (var i of +initializableObjects+.values()) { try { i.+allPrototypeMethods+; } catch(e) {}}
	for (var i of Object.values(+initializableObjects+)) { try { i.+allPrototypeMethods+; } catch(e) {}}
	for (var [i, j] of +objects+.entries()) { try { j.+allPrototypeMethods+; } catch(e) {}}
	for (var [i, j] of Object.entries(+objects+)) { try { j.+allPrototypeMethods+; } catch(e) {}}
	for (var i of +objects+.values()) { try { i.+allPrototypeMethods+; } catch(e) {}}
	for (var i of Object.values(+objects+)) { try { i.+allPrototypeMethods+; } catch(e) {}}

forLoops :=
	for (var i = 0; i < +smallUnsigned+; i++) { +forLoopInteractions+ }
	+forLoopInit+
	+forInLoops+
	+forOfLoops+

forLoopInteractions :=
	try { +ArrayForLoopInteractions+; } catch (e) {}
	try { +DataViewForLoopInteractions+; } catch (e) {}
	try { +ObjectInteractions+; } catch (e) {}
	try { +TypedArrayForLoopInteractions+; } catch (e) {}
%%%	try { +MapInteractions+; } catch (e) {}

interactions :=
	+ArrayInteractions+;
	+DataViewInteractions+;
	+ObjectInteractions+;
	+TypedArrayInteractions+;
	+MapInteractions+;
	+randomIndexInsertions+;
	+randomLengthChanges+;

wrapper :=
	try { +interactions+ } catch (e) {}
	try { +forLoops+ } catch (e) {}

%%% ###########################################################################
%%% ###########################################################################
%%% ####### VARIABLE SECTION
%%% ####### Only assign variables in this section
%%% ####### For example: @var@ = 42;
%%% ###########################################################################
%%% ###########################################################################

%section% := variable

str :=
	try { var @str@ = +strings+; } catch (e) {}
	try { var @str@ = String.fromCharCode(+charCodes+); } catch (e) {}
	try { var @str@ = String.fromCodePoint(+codePoints+); } catch (e) {}

obj :=
	try { var @obj@ = {}; } catch (e) {}
	try { var @obj@ = {%repeat%(+propertyNames+: +all+, ", ")}; } catch (e) {}
	try { var @obj@ = Object.create(null); } catch (e) {}
	try { var @obj@ = Object.create(!str!); } catch (e) {}
	try { var @obj@ = Object.create(!arr!); } catch (e) {}
	try { var @obj@ = Object.create(!t_arr!); } catch (e) {}
	try { var @obj@ = Object.create(!dv!); } catch (e) {}
	try { var @obj@ = Object.fromEntries(+maps+); } catch (e) {}

arr :=
	try { var @arr@ = new Array(+sizes+); } catch (e) {}
	try { var @arr@ = new Array(%repeat%(+unsigned+, ", ")); } catch (e) {}
	try { var @arr@ = new Array(%repeat%(+floats+, ", ")); } catch (e) {}
	try { var @arr@ = new Array(%repeat%(+all+, ", ")); } catch (e) {}
	try { var @arr@ = Array.of(%repeat%(+unsigned+, ", ")); } catch (e) {}
	try { var @arr@ = Array.of(%repeat%(+floats+, ", ")); } catch (e) {}
	try { var @arr@ = Array.of(%repeat%(+all+, ", ")); } catch (e) {}
	try { var @arr@ = Array.from([%repeat%(+unsigned+, ", ")]); } catch (e) {}
	try { var @arr@ = Array.from([%repeat%(+floats+, ", ")]); } catch (e) {}
	try { var @arr@ = Array.from([%repeat%(+all+, ", ")]); } catch (e) {}

t_arr :=
	try { var @t_arr@ = new +TypedArrayNames+(+sizes+); } catch (e) {}
	try { var @t_arr@ = new +TypedArrayNames+(!buf!); } catch (e) {}
	try { var @t_arr@ = new +TypedArrayNames+(!buf!, +smallUnsigned+, +smallUnsigned+); } catch (e) {}
	try { var @t_arr@ = new +TypedArrayNames+(!arr!); } catch (e) {}
	try { var @t_arr@ = new +TypedArrayNames+(!obj!); } catch (e) {}
	try { var @t_arr@ = new +TypedArrayNames+(+arrays+); } catch (e) {}
	try { var @t_arr@ = new +TypedArrayNames+(+objects+); } catch (e) {}

buf :=
	try { var @buf@ = new ArrayBuffer(+sizes+); } catch (e) {}

dv :=
	try { var @dv@ = new DataView(!buf!); } catch (e) {}
	try { var @dv@ = new DataView(!buf!, +smallUnsigned+, +smallUnsigned+); } catch (e) {}

map :=
	try { var @map@ = new Map(+MapConstructorArguments+); } catch (e) {}

%%% ###########################################################################
%%% ###########################################################################
%%% ####### VARIANCE SECTION
%%% ###########################################################################
%%% ###########################################################################

%section% := variance

main :=
	+wrapper+
