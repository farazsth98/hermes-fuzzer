%%% ## Author: Syed Faraz Abrar
%%% ## Twitter: https://twitter.com/farazsth98
%%% ## Description: Grammar for fuzzing JavaScript engines

%const% MAX_REPEAT_POWER := 3
%const% VARIANCE_MIN := 250
%const% VARIANCE_MAX := 350
%const% VARIABLE_MIN := 1
%const% VARIABLE_MAX := 1

%%% ###########################################################################
%%% ###########################################################################
%%% ####### VALUE SECTION
%%% ####### Only define values here
%%% ####### Use and assign value in declarations as follows: +value+
%%% ####### Use variables in statements as follows: !variable!.bar();
%%% ###########################################################################
%%% ###########################################################################

%section% := value

%%% ######## Generic Values ########

smallIntegers :=
	%range%(-64-64)

integers :=
	%range%(-9223372036854775808-92233782036854775807)

smallUnsigned := 
	%range%(0-10)

unsigned :=
	%range%(0-18446744073709551615)

smallFloats :=
	%range%(-64.0-64.0)

floats :=
	%range%(-9223372036854775808.0-92233782036854775807.0)

smallNumbers :=
	+smallIntegers+
	+smallUnsigned+
	+smallFloats+

numbers :=
	+integers+
	+unsigned+
	+floats+
	+numberObjects+

hexChars :=
	%range%(0-9)
	%range%(A-F)

stringChars :=
	%range%(a-z)
	[
	]
	{
	}
	;
	:
	\'
	\"
	,
	<
	.
	>
	/
	?
	-
	_
	=
	+
	|
	\\
	!
	@
	#
	$
	%
	^
	&
	*
	(
	)
	%range%(A-Z)
	%range%(0-9)
	\u+hexChars++hexChars++hexChars++hexChars+

regexpStringArgs :=
	+strings+

regexpLiteralArgs :=
	/%repeat%(+regexpLiteralChars+)/
	/%repeat%(+regexpLiteralChars+)/+regexpFlags+

strings :=
	"%repeat%(+stringChars+)"

propertyNames :=
%%%	%range%(a-z)%range%(a-z)%range%(a-z)
	%range%(a-z)%range%(a-z)

booleans :=
	true
	false

props :=
	"+propertyNames+": +integers+
    "+propertyNames+": +unsigned+
    "+propertyNames+": +floats+
    "+propertyNames+": +numbers+
    "+propertyNames+": +objects+
    "+propertyNames+": +all+

objects :=
	{}
	{ %repeat%(+props+, ", ") }
	(new Object(null))
	(new Object(undefined))
	(new Object(+objectsCopy+))
	(Object.create(+objectsCopy+, { %repeat%(+props+, ", ") }))
	(Object.create(+objectsCopy+, { %repeat%("+propertyNames+": +descriptor+, ", ") }))
	+arrayBuffers+
	+dataViews+
	+maps+
	+typedArrays+
	+regexpObjects+
	+strings+
	+numberObjects+
	+sets+
	!obj!

objectsExceptNumber :=
	{}
	{ %repeat%(+props+, ", ") }
	(new Object(null))
	(new Object(undefined))
	(new Object(+objectsCopy+))
	(Object.create(+objectsCopy+, { %repeat%(+props+, ", ") }))
	(Object.create(+objectsCopy+, { %repeat%("+propertyNames+": +descriptor+, ", ") }))
	+arrayBuffers+
	+dataViews+
	+maps+
	+weakmaps+
	+typedArrays+
	+regexpObjects+
	+strings+
	+sets+
	!obj!

objectsExpr :=
	var tempObj = {}; tempObj
	var tempObj = { %repeat%(+props+, ", ") }; tempObj
	var tempObj = (new Object(null)); tempObj
	var tempObj = (new Object(undefined)); tempObj
	var tempObj = (new Object(+objectsCopy)); tempObj
	var tempObj = Object.create(+objectsCopy+, { %repeat%(+props+, ", ") }); tempObj
	var tempObj = Object.create(+objectsCopy+, { %repeat%("+propertyNames+": +descriptor+, ", ") }); tempObj
	+arrayBuffersExpr+
	+dataViewsExpr+
	+mapsExpr+
	+weakmapsExpr+
	+typedArraysExpr+
	+regexpObjectsExpr+
	+numberObjectsExpr+
	+setsExpr+
	!obj!

sets :=
	(new Set(+arrays+))
	!set!

setsExpr :=
	var tempSet = new Set(+arrays+); tempSet
	!set!

regexpObjects :=
	new RegExp(+regexpStringArgs+)
	new RegExp(+regexpStringArgs+, "+regexpFlags+")
	new RegExp(+all+)
	new RegExp(+all+, "+regexpFlags+")
	new RegExp(+all+, +all+)
%%%	new RegExp(+regexpLiteralArgs+)
%%%	new RegExp(+regexpLiteralArgs+, "+regexpFlags+")
	!regexp!

regexpObjectsExpr :=
	var tempRegexpObj = new RegExp(+regexpStringArgs+); tempRegexpObj
	var tempRegexpObj = new RegExp(+regexpStringArgs+, "+regexpFlags+"); tempRegexpObj
%%%	var tempRegexpObj = new RegExp(+regexpLiteralArgs+); tempRegexpObj
%%%	var tempRegexpObj = new RegExp(+regexpLiteralArgs+, "+regexpFlags+"); tempRegexpObj
	!regexp!

arrayBuffers :=
	(new ArrayBuffer(+smallUnsigned+))
	(new ArrayBuffer(+objects+))
	!buf!

arrayBuffersExpr :=
	var tempBuf = new ArrayBuffer(+smallUnsigned+); tempBuf
	!buf!
	
dataViews :=
	(new DataView(new ArrayBuffer(+smallUnsigned+)))
	(new DataView(new ArrayBuffer(+smallUnsigned+), +smallUnsigned+, +smallUnsigned+))
	!dv!

dataViewsExpr :=
	var tempDv = new DataView(new ArrayBuffer(+smallUnsigned+)); tempDv
	var tempDv = new DataView(new ArrayBuffer(+smallUnsigned+), +smallUnsigned+, +smallUnsigned+); tempDv
	!dv!

maps :=
	(new Map(+MapConstructorArguments+))
	!map!

weakmaps :=
	(new WeakMap(+WeakMapConstructorArguments+))
	!weakmap!

weakmapsExpr :=
	var tempWeakMap = new WeakMap(+WeakMapConstructorArguments+); tempWeakMap
	!weakmap!

mapsExpr :=
	var tempMap = new Map(+MapConstructorArguments+); tempMap
	!map!

numberObjects :=
	(new Number(+numbers+))
	(new Number(+all+))
	!num!

numberObjectsExpr :=
	var tempNum = new Number(+numbers+); tempNum
	var tempNum = new Number(+all+); tempNum
	!num!

arrayElements :=
	+numbers+
	+objects+
	+arraysCopy+
	+typedArraysCopy+
	+numberObjects+

arrays :=
	[]
	[%repeat%(+integers+, ", ")]
	[%repeat%(+unsigned+, ", ")]
	[%repeat%(+floats+, ", ")]
	[%repeat%(+objects+, ", ")]
	[%repeat%(+arraysCopy+, ", ")]
	[%repeat%(+arrayElements+, ", ")]
	(new Array([%repeat%(+integers+, ", ")])) 
	(new Array([%repeat%(+unsigned+, ", ")]))
	(new Array([%repeat%(+floats+, ", ")]))
	(new Array([%repeat%(+objects+, ", ")]))
	(new Array([%repeat%(+arraysCopy+, ", ")]))
	(new Array([%repeat%(+typedArraysCopy+, ", ")]))
	(new Array([%repeat%(+arrayElements+, ", ")]))
	!arr!

arraysExpr :=
	[]
	[%repeat%(+integers+, ", ")]
	[%repeat%(+unsigned+, ", ")]
	[%repeat%(+floats+, ", ")]
	[%repeat%(+objects+, ", ")]
	[%repeat%(+arraysCopy+, ", ")]
	[%repeat%(+arrayElements+, ", ")]
	var tempArray = new Array([%repeat%(+integers+, ", ")]); tempArray
	var tempArray = new Array([%repeat%(+unsigned+, ", ")]); tempArray
	var tempArray = new Array([%repeat%(+floats+, ", ")]); tempArray
	var tempArray = new Array([%repeat%(+objects+, ", ")]); tempArray
	var tempArray = new Array([%repeat%(+arraysCopy+, ", ")]); tempArray
	var tempArray = new Array([%repeat%(+typedArraysCopy+, ", ")]); tempArray
	var tempArray = new Array([%repeat%(+arrayElements+, ", ")]); tempArray
	!arr!

typedArrays :=
	(new +TypedArrayNames+([%repeat%(+integers+, ", ")]))
	(new +TypedArrayNames+([%repeat%(+unsigned+, ", ")]))
	(new +TypedArrayNames+([%repeat%(+floats+, ", ")]))
	(new +TypedArrayNames+([%repeat%(+numbers+, ", ")]))
	(new +TypedArrayNames+([%repeat%(+objects+, ", ")]))
	(new +TypedArrayNames+(+initializableObjects+))
	(new +TypedArrayNames+(+objects+))
	(new +TypedArrayNames+(!buf!))
	(new +TypedArrayNames+(+arrays+))
	(new +TypedArrayNames+(+typedArraysCopy+))
	!t_arr!

typedArraysExpr :=
	var tempTypedArray = new +TypedArrayNames+([%repeat%(+integers+, ", ")]); tempTypedArray
	var tempTypedArray = new +TypedArrayNames+([%repeat%(+unsigned+, ", ")]); tempTypedArray
	var tempTypedArray = new +TypedArrayNames+([%repeat%(+floats+, ", ")]); tempTypedArray
	var tempTypedArray = new +TypedArrayNames+([%repeat%(+numbers+, ", ")]); tempTypedArray
	var tempTypedArray = new +TypedArrayNames+([%repeat%(+objects+, ", ")]); tempTypedArray
	var tempTypedArray = new +TypedArrayNames+(+initializableObjects+); tempTypedArray
	var tempTypedArray = new +TypedArrayNames+(+objects+); tempTypedArray
	var tempTypedArray = new +TypedArrayNames+(!buf!); tempTypedArray
	var tempTypedArray = new +TypedArrayNames+(+arrays+); tempTypedArray
	var tempTypedArray = new +TypedArrayNames+(+typedArraysCopy+); tempTypedArray
	!t_arr!

%%% These copies are to prevent recursion

objectsCopy :=
	{}
	{ %repeat%(+props+, ", ") }
	(new Object())
	(new Object(null))
	(new Object(undefined))
	(Object.create(null))
	+arrayBuffersCopy+
	+dataViews+
	+maps+
	+typedArrays+
	+regexpObjects+
	+strings+
	+numberObjects+
	+sets+
	!obj!

arraysCopy :=
	[]
	[%repeat%(+integers+, ", ")]
	[%repeat%(+unsigned+, ", ")]
	[%repeat%(+floats+, ", ")]
	[%repeat%(+objects+, ", ")]
	(new Array([%repeat%(+integers+, ", ")])) 
	(new Array([%repeat%(+unsigned+, ", ")]))
	(new Array([%repeat%(+floats+, ", ")]))
	(new Array([%repeat%(+objects+, ", ")]))
	(new Array([%repeat%(+typedArraysCopy+, ", ")]))
	!arr!

typedArraysCopy :=
	(new +TypedArrayNames+([%repeat%(+integers+, ", ")]))
	(new +TypedArrayNames+([%repeat%(+unsigned+, ", ")]))
	(new +TypedArrayNames+([%repeat%(+floats+, ", ")]))
	(new +TypedArrayNames+([%repeat%(+numbers+, ", ")]))
	(new +TypedArrayNames+([%repeat%(+objects+, ", ")]))
	(new +TypedArrayNames+(+initializableObjects+))
	(new +TypedArrayNames+(+objects+))
	(new +TypedArrayNames+(!buf!))
	(new +TypedArrayNames+(+arrays+))
	!t_arr!

arrayBuffersCopy :=
	(new ArrayBuffer(+smallUnsigned+))
	!buf!

others :=
	NaN
	undefined
	null
	Infinity
	-Infinity
	+arrayBuffers+.byteLength

all :=
	+integers+
	+floats+
	+strings+
	+booleans+
	+objects+
	+arrays+
	+typedArrays+
	+maps+
	+dataViews+
	+arrayBuffers+
	+regexpObjects+
	+others+
	+MathConstants+
	+NumberConstants+
	!str!

sizes :=
	%range%(0-64)

charCodes :=
	0x%range%(0x0-0xff)
	+charCodes+, +charCodes+

codePoints :=
	%range%(0-999999)

twoIntArgs :=
	%range%(0-64), %range%(0-64)

threeIntArgs :=
	%range%(0-64), %range%(0-64), %range%(0-64)
	
twoFloatArgs :=
	%range%(0.0-64.0), %range%(0.0-64.0)

threeFloatArgs :=
	%range%(0.0-64.0), %range%(0.0-64.0), %range%(0.0-64.0)

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Generic Functions ########
%%% ##############################################################################################
%%% ##############################################################################################

genericEmptyFunc :=
	function() {}

%%% ####################################
%%% ######## Callback Functions ########
%%% ####################################

genericFuncOneArg :=
	function(element) { element.+allPrototypeMethods+; }
	function(element) { let args = Array.prototype.slice.call(arguments, 1); args.+allPrototypeMethods+; }
	function(element) { "use strict"; element.+allPrototypeMethods+; }
	function(element) { "use strict"; let args = Array.prototype.slice.call(arguments, 1); args.+allPrototypeMethods+; }

genericFuncOneArgCmp :=
	function(element) { element < +integers+; }
	function(element) { element <= +integers+; }
	function(element) { element >= +integers+; }
	function(element) { element > +integers+; }

genericFuncOneArgNumOp :=
	function(element) { element + +integers+; }
	function(element) { element - +integers+; }
	function(element) { element * +integers+; }
	function(element) { element / +integers+; }
	function(element) { element ^ +integers+; }

genericFuncTwoArgs :=
	function(acc, element) { acc.+JSArrayInPlaceMethodNames+(element); }
	function(acc, element) { acc.+JSArrayForLoopUnsafeNames+(element); }
	function(acc, element) { let args = Array.prototype.slice.call(arguments, 1); args.+JSArrayInPlaceMethodNames+(element); }
	function(acc, element) { let args = Array.prototype.slice.call(arguments, 1); args.+JSArrayForLoopUnsafeNames+(element); }
	function(acc, element) { "use strict"; acc.+JSArrayInPlaceMethodNames+(element); }
	function(acc, element) { "use strict"; acc.+JSArrayForLoopUnsafeNames+(element); }
	function(acc, element) { "use strict"; let args = Array.prototype.slice.call(arguments, 1); args.+JSArrayInPlaceMethodNames+(element); }
	function(acc, element) { "use strict"; let args = Array.prototype.slice.call(arguments, 1); args.+JSArrayForLoopUnsafeNames+(element); }

genericFuncTwoArgsCmp :=
	function(c_first, c_second) { c_first < c_second; }
	function(c_first, c_second) { c_first <= c_second; }
	function(c_first, c_second) { c_first >= c_second; }
	function(c_first, c_second) { c_first > c_second; }

genericFuncTwoArgsNumOp :=
	function(acc, element) { acc + element; }
	function(acc, element) { acc - element; }
	function(acc, element) { acc * element; }
	function(acc, element) { acc / element; }
	function(acc, element) { acc ^ element; }

%%% ########
%%% MAYBE: change these to call +allPrototypeMethods+ instead? Later later
%%% ########

genericFuncThreeArgs :=
	function(c_val, c_index, c_array) { c_array[c_index] = c_array.+arrayMethods+; }
	function(c_val, c_index, c_array) { c_array[c_index] = c_val.+arrayMethods+; }
	function(c_val, c_index, c_array) { let args = Array.prototype.slice.call(arguments, 1); c_array[c_index] = args.+arrayMethods+; }
	function(c_val, c_index, c_array) { c_val = c_array.+arrayMethods+; }
	function(c_val, c_index, c_array) { c_val = c_val.+arrayMethods+; }
	function(c_val, c_index, c_array) { let args = Array.prototype.slice.call(arguments, 1); c_val = args.+arrayMethods+; }
	function(c_val, c_index, c_array) { "use strict"; c_array[c_index] = c_array.+arrayMethods+; }
	function(c_val, c_index, c_array) { "use strict"; c_array[c_index] = c_val.+arrayMethods+; }
	function(c_val, c_index, c_array) { "use strict"; let args = Array.prototype.slice.call(arguments, 1); c_array[c_index] = args.+arrayMethods+; }
	function(c_val, c_index, c_array) { "use strict"; c_val = c_array.+arrayMethods+; }
	function(c_val, c_index, c_array) { "use strict"; c_val = c_val.+arrayMethods+; }
	function(c_val, c_index, c_array) { "use strict"; let args = Array.prototype.slice.call(arguments, 1); c_val = args.+arrayMethods+; }

genericFuncFourArgs :=
	function(acc, c_val, c_index, c_array) { c_array[c_index] = c_array.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { c_array[c_index] = c_val.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { let args = Array.prototype.slice.call(arguments, 1); c_array[c_index] = args.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { c_val = c_array.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { c_val = c_val.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { let args = Array.prototype.slice.call(arguments, 1); c_val = args.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { "use strict"; c_array[c_index] = c_array.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { "use strict"; c_array[c_index] = c_val.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { "use strict"; let args = Array.prototype.slice.call(arguments, 1); c_array[c_index] = args.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { "use strict"; c_val = c_array.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { "use strict"; c_val = c_val.+arrayMethods+; }
	function(acc, c_val, c_index, c_array) { "use strict"; let args = Array.prototype.slice.call(arguments, 1); c_val = args.+arrayMethods+; }

%%% #############################################
%%% ######## Getter and Setter functions ########
%%% #############################################

genericFuncGetters :=
	function() { return +all+; }
	function() { return +smallNumbers+; }
	function() { return +numbers+; }
	function() { this.+allPrototypeMethods+; }

genericFuncSetters :=
	function(val) { this.+propertyNames+ = val; }
	function(val) { this[+smallIntegers+] = val; }
	function(val) { this[+smallNumbers+] = val; }
	function(val) { this.+allPrototypeMethods+; }

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## JSArrays ########
%%% ## https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array ##
%%% ##############################################################################################
%%% ##############################################################################################

%%% #############################################
%%% ######## Wrappers around all methods ########
%%% #############################################

arrayMethodNames :=
	+JSArrayCallbackMethodNames+
	+JSArrayInPlaceMethodNames+
	+JSArrayForLoopUnsafeNames+

arrayMethods :=
	+JSArrayCallbackMethod+
	+JSArrayInPlaceMethod+
	+JSArrayForLoopUnsafe+

arrayMethodsForLoop :=
	+JSArrayCallbackMethod+
	+JSArrayInPlaceMethod+

%%% ########################################
%%% ######## Methods with callbacks ########
%%% ########################################

%%% ########################################
%%% ######## Names and Declarations ########
%%% ########################################

JSArrayCallbackMethodNames :=
	every
	filter
	find
	findIndex
	flatMap
	forEach
	map
	reduce
	reduceRight
	some
	sort

JSArrayCallbackMethod :=
	+every+
	+filter+
	+find+
	+findIndex+
	+flatMap+
	+arrayForEach+
	+map+
	+reduce+
	+reduceRight+
%%%	+some+
	+sort+

%%% ######## Implementations ########

every :=
	every()
	every(+genericEmptyFunc+)
	every(+genericFuncOneArgCmp+)
	every(+genericFuncThreeArgs+)

filter :=
	filter()
	filter(+genericEmptyFunc+)
	filter(+genericFuncOneArgCmp+)
	filter(+genericFuncThreeArgs+)

find :=
	find()
	find(+genericEmptyFunc+)
	find(+genericFuncOneArgCmp+)
	find(+genericFuncThreeArgs+)

findIndex :=
	findIndex()
	findIndex(+genericEmptyFunc+)
	findIndex(+genericFuncOneArgCmp+)
	findIndex(+genericFuncThreeArgs+)

flatMap :=
	flatMap()
	flatMap(+genericEmptyFunc+)
	flatMap(+genericFuncOneArg+)
	flatMap(+genericFuncOneArgNumOp+)
	flatMap(+genericFuncThreeArgs+)

arrayForEach :=
	forEach()
	forEach(+genericEmptyFunc+)
	forEach(+genericFuncOneArg+)
	forEach(+genericFuncThreeArgs+)

map :=
	map(+genericEmptyFunc+)
	map(+genericFuncOneArg+)
	map(+genericFuncOneArgNumOp+)
	map(+genericFuncThreeArgs+)

reduce :=
	reduce()
	reduce(+genericFuncTwoArgs+)
	reduce(+genericFuncTwoArgsNumOp+)
	reduce(+genericFuncFourArgs+)

reduceRight :=
	reduceRight()
	reduceRight(+genericFuncTwoArgs+)
	reduceRight(+genericFuncTwoArgsNumOp+)
	reduceRight(+genericFuncFourArgs+)

some :=
	some()
	some(+genericEmptyFunc+)
	some(+genericFuncOneArgCmp+)
	some(+genericFuncThreeArgs+)

sort :=
	sort()
	sort(+genericEmptyFunc+)
	sort(+genericFuncTwoArgsCmp+)
	sort(+genericFuncThreeArgs+)
	
%%% #############################################
%%% ######## Methods that occur in-place ########
%%% #############################################

%%% ########################################
%%% ######## Names and Declarations ########
%%% ########################################

JSArrayForLoopUnsafeNames :=
	push
	splice
	unshift
	concat

JSArrayForLoopUnsafe :=
	+push+
	+splice+
	+unshift+
	+concat+

JSArrayInPlaceMethodNames :=
	copyWithin
	entries
	fill
	flat
	includes
	indexOf
	join
	keys
	lastIndexOf
	pop
	reverse
	shift
	slice
	toString
	values

JSArrayInPlaceMethod :=
	+copyWithin+
	+entries+
	+fill+
	+flat+
	+includes+
	+indexOf+
	+join+
	+keys+
	+lastIndexOf+
	+pop+
	+reverse+
	+shift+
	+slice+
	+values+

%%% #################################
%%% ######## Implementations ########
%%% #################################

concat :=
	concat()
	concat(+arrays+)
	concat(+objects+)

copyWithin :=
	copyWithin(+twoIntArgs+)
	copyWithin(+threeIntArgs+)

flat :=
	flat()
	flat(+all+)

entries :=
	entries()
	entries(%repeat%(+all+, ", "))

fill :=
	fill(+all+)
	fill(+all+, +twoIntArgs+)

includes :=
	includes(+all+)
	includes(+all+, +smallUnsigned+)

indexOf :=
	indexOf(+all+)
	indexOf(+all+, +smallUnsigned+)

join :=
	join()
	join(+all+)

keys :=
	keys()
	keys(%repeat%(+all+, ", "))

lastIndexOf :=
	lastIndexOf(+all+)
	lastIndexOf(+all+, +smallUnsigned+)

pop :=
	pop()
	pop(%repeat%(+all+, ", "))

push :=
	push()
	push(%repeat%(+all+, ", "))

reverse :=
	reverse()
	reverse(%repeat%(+all+, ", "))

shift :=
	shift()
	shift(%repeat%(+all+, ", "))

slice :=
	slice()
	slice(+smallUnsigned+)
	slice(+smallUnsigned+, +smallUnsigned+)
	slice(+all+)
	slice(+all+, +all+)

splice :=
	splice()
	splice(+smallUnsigned+)
	splice(+smallUnsigned+, +smallUnsigned+)
	splice(0, +smallUnsigned+)
	splice(+smallUnsigned+, +smallUnsigned+, %repeat%(+all+, ", "))
	splice(0, +smallUnsigned+, %repeat%(+all+, ", "))


unshift :=
	unshift()
	unshift(%repeat%(+all+, ", "))

values :=
	values()
	values(%repeat%(+all+, ", "))
	
%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## ArrayBuffers ########
%%% ### https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer
%%% ##############################################################################################
%%% ##############################################################################################

ArrayBufferPrototypeMethods :=
	slice(+smallIntegers+)
	slice(+smallUnsigned+, +smallUnsigned+)

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## DataViews ########
%%% ### https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView
%%% ##############################################################################################
%%% ##############################################################################################

DataViewSetArgs :=
	+booleans+
	+integers+
	+floats+
	+all+

DataViewGetMethods :=
    getFloat32
    getFloat64
    getInt16
    getInt32
    getInt8
    getUint16
    getUint32
    getUint8

DataViewSetMethods :=
    setFloat32
    setFloat64
    setInt16
    setInt32
    setInt8
    setUint16
    setUint32
    setUint8

DataViewMethods :=
	+DataViewGetMethods+(%range%(0-8), +booleans+)
	+DataViewGetMethods+(%range%(0-8), +booleans+)
	+DataViewSetMethods+(%range%(0-8), +DataViewSetArgs+, +booleans+)
	+DataViewSetMethods+(%range%(0-8), +DataViewSetArgs+, +others+)

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Object ########
%%% ### https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object
%%% ##############################################################################################
%%% ##############################################################################################

assign :=
	assign(+initializableObjects+, +objects+)
	assign(+initializableObjects+, %repeat%(+objects+, ", "))
	assign(+initializableObjects+, +arrays+)
	assign(+initializableObjects+, %repeat%(+arrays+, ", "))

descriptor :=
	{ value: +all+, writable: +booleans+, configurable: +booleans+, enumerable: +booleans+ }

defineProperties :=
	defineProperties(+initializableObjects+, %repeat%({"+propertyNames+": +descriptor+}, ", "))
	defineProperties(+objects+, %repeat%({"+propertyNames+": +descriptor+}, ", "))
	defineProperties(+arrays+, %repeat%({"+propertyNames+": +descriptor+}, ", "))

defineProperty :=
	defineProperty(+objects+, "+propertyNames+", %repeat%(+descriptor+, ", "))
	defineProperty(+arrays+, "+propertyNames+", %repeat%(+descriptor+, ", "))

freeze :=
	freeze(+initializableObjects+)
	freeze(+objects+)
	freeze(+arrays+)

fromEntries :=
	fromEntries(+maps+)
	fromEntries(+MapConstructorArguments+)

getOwnPropertyDescriptor :=
	getOwnPropertyDescriptor(+objects+, "+propertyNames+")
	getOwnPropertyDescriptor(+arrays+, "+propertyNames+")

getOwnPropertyDescriptors :=
	getOwnPropertyDescriptors(+objects+)
	getOwnPropertyDescriptors(+arrays+)

getOwnPropertyNames :=
	getOwnPropertyNames(+objects+)
	getOwnPropertyNames(+arrays+)

getOwnPropertySymbols :=
	getOwnPropertySymbols(+objects+)
	getOwnPropertySymbols(+arrays+)

getPrototypeOf :=
	getPrototypeOf(+objects+)
	getPrototypeOf(+arrays+)

is :=
	is(+all+, +all+)

isExtensible :=
	isExtensible(+objects+)
	isExtensible(+arrays+)

isFrozen :=
	isFrozen(+objects+)
	isFrozen(+arrays+)

isSealed :=
	isSealed(+objects+)
	isSealed(+arrays+)

preventExtensions :=
	preventExtensions(+initializableObjects+)
	preventExtensions(+objects+)
	preventExtensions(+arrays+)

seal :=
	seal(+initializableObjects+)
	seal(+objects+)
	seal(+arrays+)

setPrototypeOf :=
	setPrototypeOf(!arr!, +objects+); !arr!.+allPrototypeMethods+
	setPrototypeOf(!t_arr!, +objects+); !t_arr!.+allPrototypeMethods+
	setPrototypeOf(!dv!, +objects+); !dv!.+allPrototypeMethods+
	setPrototypeOf(!obj!, +objects+); !obj!.+allPrototypeMethods+
	setPrototypeOf(!buf!, +objects+); !buf!.+allPrototypeMethods+
	setPrototypeOf(!map!, +objects+); !map!.+allPrototypeMethods+
	setPrototypeOf(!regexp!, +objects+); !regexp!.+allPrototypeMethods+
	setPrototypeOf(!arr!, +arrays+); !arr!.+allPrototypeMethods+
	setPrototypeOf(!t_arr!, +arrays+); !t_arr!.+allPrototypeMethods+
	setPrototypeOf(!dv!, +objects); !dv!.+allPrototypeMethods+
	setPrototypeOf(!obj!, +arrays+); !obj!.+allPrototypeMethods+
	setPrototypeOf(!buf!, +arrays+); !buf!.+allPrototypeMethods+
	setPrototypeOf(!map!, +arrays+); !map!.+allPrototypeMethods+
	setPrototypeOf(!regexp!, +arrays+); !regexp!.+allPrototypeMethods+

ObjectPrototypeMethods :=
	+hasOwnProperty+
	+isPrototypeOf+
	+propertyIsEnumerable+
	+toLocaleString+
	+toString+
	+defineGetter+
	+defineSetter+
	+lookupGetter+
	+lookupSetter+
	valueOf()

hasOwnProperty :=
	hasOwnProperty("+propertyNames+")
	hasOwnProperty(+all+)
	hasOwnProperty(%repeat%(+all+, ", "))

isPrototypeOf :=
	isPrototypeOf(+all+)
	isPrototypeOf(%repeat%(+all+, ", "))

propertyIsEnumerable :=
	propertyIsEnumerable(+all+)
	propertyIsEnumerable(%repeat%(+all+, ", "))

toLocaleString :=
	toLocaleString()
	toLocaleString(%repeat%(+all+, ", "))

toString :=
	toString()
	toString(%repeat%(+all+, ", "))

defineGetter :=
	__defineGetter__(+smallNumbers+, +genericFuncGetters+)
	__defineGetter__("+propertyNames+", +genericFuncGetters+)

defineSetter :=
	__defineSetter__(+smallNumbers+, +genericFuncSetters+)
	__defineSetter__("+propertyNames+", +genericFuncSetters+)

lookupGetter :=
	__lookupGetter__("+propertyNames+")
	__lookupGetter__(+numbers+)

lookupSetter :=
	__lookupSetter__("+propertyNames+")
	__lookupSetter__(+numbers+)

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## TypedArrays ########
%%% ### https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
%%% ##############################################################################################
%%% ##############################################################################################

TypedArrayNames :=
	Int8Array
	Uint8Array
	Uint8ClampedArray
	Int16Array
	Uint16Array
	Int32Array
	Uint32Array
	Float32Array
	Float64Array

TypedArrayMethods :=
	+arrayMethods+
	+subarray+
	+TypedArraySet+

TypedArrayMethodsForLoop :=
	+arrayMethodsForLoop+
	+subarray+
	+TypedArraySet+

subarray :=
	subarray()
	subarray(+smallUnsigned+)
	subarray(+smallUnsigned+, +smallUnsigned+)

TypedArraySet :=
	set(+arrays+)
	set(+arrays+, +smallUnsigned+)
	set(+typedArrays+)
	set(+typedArrays+, +smallUnsigned+)

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Map ########
%%% ### https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
%%% ##############################################################################################
%%% ##############################################################################################

MapConstructorArguments :=
	[%repeat%(["+propertyNames+", +all+], ", ")]
	[%repeat%([+smallUnsigned+, +all+], ", ")]
	[%repeat%([+unsigned+, +all+], ", ")]
	[%repeat%([+objects+, +all+], ", ")]
	[%repeat%([+arrays+, +all+], ", ")]

MapMethods :=
	+clear+
	+mapDelete+
	+entries+
	+mapForEach+
	+mapGet+
	+mapHas+
	+keys+
	+mapSet+
	+values+

MapAccessors :=
	size

clear :=
	clear()

mapDelete :=
	delete("+propertyNames+")
	delete(+smallUnsigned+)
	delete(+unsigned+)
	delete(+objects+)
	delete(+arrays+)

mapForEach :=
	forEach()
	forEach(+genericEmptyFunc+)
	forEach(+genericFuncOneArg+)
	forEach(+genericFuncTwoArgs+)

mapGet :=
	get("+propertyNames+")
	get(+smallUnsigned+)
	get(+unsigned+)
	get(+objects+)
	get(+arrays+)

mapHas :=
	has("+propertyNames+")
	has(+smallUnsigned+)
	has(+unsigned+)
	has(+objects+)
	has(+arrays+)

mapSet :=
	set("+propertyNames+", +all+)
	set(+smallUnsigned+, +all+)
	set(+unsigned+, +all+)
	set(+objects+, +all+)
	set(+arrays+, +all+)

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Math ########
%%% ### https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math
%%% ##############################################################################################

MathConstants :=
	Math.E
	Math.LN10
	Math.LN2
	Math.LOG10E
	Math.LOG2E
	Math.PI
	Math.SQRT1_2
	Math.SQRT2

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Reflect ########
%%% ### https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect
%%% ##############################################################################################

%%% ### This is just a placeholder because Reflect is so simple. Search for ReflectInteractions

ReflectMethodNames :=
	Reflect.apply()
    Reflect.construct()
    Reflect.defineProperty()
    Reflect.deleteProperty()
    Reflect.get()
    Reflect.getOwnPropertyDescriptor()
    Reflect.getPrototypeOf()
    Reflect.has()
    Reflect.isExtensible()
    Reflect.ownKeys()
    Reflect.preventExtensions()
    Reflect.set()
    Reflect.setPrototypeOf()

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## RegExp ########
%%% ### https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp
%%% ##############################################################################################

RegExpPrototypeVariables :=
	dotAll
	flags
	global
	ignoreCase
	multiline
	source
	sticky
	unicode
	lastIndex

RegExpPrototypeMethods :=
	test(+strings+)
	test(+objects+)
	exec(+strings+)
	exec(+objects+)

RegExpSymbolMethods :=
	[Symbol.match](+strings+)
	[Symbol.match](+objects+)
	[Symbol.replace](+strings+)
	[Symbol.replace](+objects+)
	[Symbol.search](+strings+)
	[Symbol.search](+objects+)
	[Symbol.split](+strings+)
	[Symbol.split](+objects+)

RegExpStaticVariables :=
	RegExp.input
	RegExp.$%range%(1-9)
	RegExp.lastMatch
	RegExp.lastParen
	RegExp.leftContext
	RegExp.rightContext

regexpLiteralChars :=
	%range%(a-z)
	\'
	\"
	.
	?
	=
	+
	|
	\\
	!
	@
	#
	$
	%
	^
	&
	%range%(A-Z)
	%range%(0-9)

regexpFlags :=
	g
	i
	m
	s
	u
	y

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Number ########
%%% ### https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number
%%% ##############################################################################################

NumberConstants :=
	Number.EPSILON
	Number.MAX_SAFE_INTEGER
	Number.MAX_VALUE
	Number.MIN_SAFE_INTEGER
	Number.MIN_VALUE
	Number.NEGATIVE_INFINITY
	Number.NaN
	Number.POSITIVE_INFINITY

NumberStaticMethods :=
	Number.isFinite(+all+)
	Number.isFinite(+numbers+)
	Number.isInteger(+all+)
	Number.isInteger(+numbers+)
	Number.isNaN(+all+)
	Number.isNaN(+numbers+)
	Number.isSafeInteger(+all+)
	Number.isSafeInteger(+numbers+)
	Number.parseFloat(+all+)
	Number.parseFloat(+numbers+)
	Number.parseInt(+all+)
	Number.parseInt(+numbers+)

NumberPrototypeMethods :=
	toExponential()
	toExponential(+numbers+)
	toExponential(+all+)
	toFixed()
	toFixed(+numbers+)
	toFixed(+all+)
	toPrecision()
	toPrecision(+numbers+)
	toPrecision(+all+)

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Set ########
%%% ### https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set
%%% ##############################################################################################

SetPrototypeMethods :=
	size
	add(+all+)
	clear()
	clear(+all+)
	delete(+all+)
	has(+all+)

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## WeakMap ########
%%% ### https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap
%%% ##############################################################################################

WeakMapConstructorArguments :=
	[%repeat%([+initializableObjects+, +all+], ", ")]
	[%repeat%([+objects+, +all+], ", ")]
	[%repeat%([+arrays+, +all+], ", ")]

WeakMapMethods :=
	+weakMapDelete+
	+weakMapGet+
	+weakMapHas+
	+weakMapSet+

weakMapDelete :=
	delete(+initializableObjects+)
	delete(+objects+)
	delete(+arrays+)

weakMapGet :=
	get(+initializableObjects+)
	get(+objects+)
	get(+arrays+)

weakMapHas :=
	has(+initializableObjects+)
	has(+objects+)
	has(+arrays+)

weakMapSet :=
	set(+initializableObjects+, +all+)
	set(+objects+, +all+)
	set(+arrays+, +all+)

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Object specific interactions ########
%%% ##############################################################################################
%%% ##############################################################################################

DataViewInteractions :=
	+dataViewsExpr+.+DataViewMethods+
	+dataViewsExpr+[+smallUnsigned+] = +dataViews+.+DataViewMethods+
	+dataViewsExpr+.+allPrototypeMethods+
	+dataViewsExpr+[+smallUnsigned+] = +dataViews+.+allPrototypeMethods+

DataViewForLoopInteractions :=
	!dv!.+DataViewMethods+
	!dv![i] = !dv!.+DataViewMethods+
	!dv!.+arrayMethodsForLoop+
	!dv![i] = !dv!.+arrayMethodsForLoop+

ArrayInteractions :=
	+arraysExpr+.+arrayMethods+
	+arraysExpr+[+smallUnsigned+] = +arrays+.+arrayMethods+
	+arraysExpr+[+smallUnsigned+].+arrayMethods+
	+arraysExpr+[+smallUnsigned+] = tempArray[+smallUnsigned+].+arrayMethods+
	+arraysExpr+[+smallUnsigned+] = +arrays+[+smallUnsigned+].+arrayMethods+
	+arraysExpr+.+allPrototypeMethods+
	+arraysExpr+[+smallUnsigned+] = +arrays+.+allPrototypeMethods+
	+arraysExpr+[+smallUnsigned+].+allPrototypeMethods+
	+arraysExpr+[+smallUnsigned+] = tempArray[+smallUnsigned+].+allPrototypeMethods+
	+arraysExpr+[+smallUnsigned+] = +arrays+[+smallUnsigned+].+allPrototypeMethods+
	Array.isArray(+all+)

ArrayForLoopInteractions :=
	!arr!.+arrayMethodsForLoop+
	!arr![i] = !arr!.+arrayMethodsForLoop+
	!arr![i].+arrayMethodsForLoop+
	!arr![i] = !arr![i].+arrayMethodsForLoop+
	Array.isArray(+all+)

TypedArrayInteractions :=
	+typedArraysExpr+.+TypedArrayMethods+
	+typedArraysExpr+[+smallUnsigned+] = +typedArrays+.+TypedArrayMethods+
	+typedArraysExpr+[+smallUnsigned+].+TypedArrayMethods+
	+typedArraysExpr+[+smallUnsigned+] = tempTypedArray[+smallUnsigned+].+TypedArrayMethods+
	+typedArraysExpr+[+smallUnsigned+] = +typedArrays+[+smallUnsigned+].+TypedArrayMethods+
	+typedArraysExpr+.+allPrototypeMethods+
	+typedArraysExpr+[+smallUnsigned+] = +typedArrays+.+allPrototypeMethods+
	+typedArraysExpr+[+smallUnsigned+].+allPrototypeMethods+
	+typedArraysExpr+[+smallUnsigned+] = tempTypedArray[+smallUnsigned+].+allPrototypeMethods+
	+typedArraysExpr+[+smallUnsigned+] = +typedArrays+[+smallUnsigned+].+allPrototypeMethods+

TypedArrayForLoopInteractions :=
	+typedArraysExpr+.+TypedArrayMethodsForLoop+
	+typedArraysExpr+[i] = +typedArrays+.+TypedArrayMethodsForLoop+
	+typedArraysExpr+[i].+TypedArrayMethodsForLoop+
	+typedArraysExpr+[i] = +typedArrays+[i].+TypedArrayMethodsForLoop+

ArrayBufferInteractions :=
	+arrayBuffersExpr+.+ArrayBufferPrototypeMethods+
	+arrayBuffersExpr+.+allPrototypeMethods+
	ArrayBuffer.isView(+objects+)
	ArrayBuffer.isView(+typedArrays+)
	ArrayBuffer.isView(+dataViews+)
	ArrayBuffer[Symbol.species]

ArrayBufferForLoopInteractions :=
	!buf!.+ArrayBufferPrototypeMethods+
	+arrayBuffersExpr+.+ArrayBufferPrototypeMethods+
	!buf!.+arrayMethodsForLoop+
	!buf![i] = !buf!.+arrayMethodsForLoop+
	!buf![i].+arrayMethodsForLoop+
	!buf![i] = !buf![i].+arrayMethodsForLoop+
	ArrayBuffer.isView(+objects+)
	ArrayBuffer.isView(+typedArrays+)
	ArrayBuffer.isView(+dataViews+)
	ArrayBuffer[Symbol.species]

ObjectInteractions :=
	Object.+assign+
	Object.+defineProperties+
	Object.+defineProperty+
	Object.+freeze+
	Object.+fromEntries+
	Object.+getOwnPropertyDescriptor+
	Object.+getOwnPropertyDescriptors+
	Object.+getOwnPropertyNames+
	Object.+getOwnPropertySymbols+
	Object.+getPrototypeOf+
	Object.+is+
	Object.+isExtensible+
	Object.+isFrozen+
	Object.+isSealed+
	Object.+preventExtensions+
	Object.+seal+
	Object.+setPrototypeOf+
	+objectsExpr+.+allPrototypeMethods+
	+objectsExpr+[+smallUnsigned+] = +objects+.+allPrototypeMethods+
	+objectsExpr+[+smallUnsigned+].+allPrototypeMethods+
	+objectsExpr+[+smallUnsigned+] = +objects+[+smallUnsigned+].+allPrototypeMethods+
	+initializableObjects+.+allPrototypeMethods+
	+objectsExpr+.+allPrototypeMethods+

ObjectForLoopInteractions :=
	!obj!.+arrayMethodsForLoop+
	!obj![i] = !obj!.+arrayMethodsForLoop+
	!obj![i].+arrayMethodsForLoop+
	!obj![i] = !obj![i].+arrayMethodsForLoop+

MapInteractions :=
	+mapsExpr+.+MapMethods+
	+mapsExpr+.+MapAccessors+
	+mapsExpr+.+allPrototypeMethods+

MapForLoopInteractions :=
	+mapsExpr+.+MapMethods+
	+mapsExpr+.+MapAccessors+
	!map!.+arrayMethodsForLoop+
	!map![i] = !map!.+arrayMethodsForLoop+
	!map![i].+arrayMethodsForLoop+
	!map![i] = !map![i].+arrayMethodsForLoop+

WeakMapInteractions :=
	+weakmapsExpr+.+WeakMapMethods+
	+weakmapsExpr+.+allPrototypeMethods+

WeakMapForLoopInteractions :=
	+weakmapsExpr+.+MapMethods+
	!weakmap!.+arrayMethodsForLoop+
	!weakmap![i] = !map!.+arrayMethodsForLoop+
	!weakmap![i].+arrayMethodsForLoop+
	!weakmap![i] = !map![i].+arrayMethodsForLoop+

ReflectInteractions :=
%%%	Reflect.apply
%%%	Reflect.construct
	Reflect.+defineProperty+
	Reflect.deleteProperty(+objects+, "+propertyNames+")
	Reflect.get(+objects+, "+propertyNames+")
	Reflect.+getOwnPropertyDescriptor+
	Reflect.+getPrototypeOf+
	Reflect.has(+objects+, "+propertyNames+")
	Reflect.+isExtensible+
	Reflect.ownKeys(+objects+)
	Reflect.+preventExtensions+
	Reflect.set(+objects+, "+propertyNames+", +all+)
	Reflect.+setPrototypeOf+

MathInteractions :=
	Math.abs(+all+)
	Math.acos(+all+)
	Math.acosh(+all+)
	Math.asin(+all+)
	Math.asinh(+all+)
	Math.atan(+all+)
	Math.atan2(+all+, +all+)
	Math.atanh(+all+)
	Math.cbrt(+all+)
	Math.ceil(+all+)
	Math.clz32(+all+)
	Math.cos(+all+)
	Math.cosh(+all+)
	Math.exp(+all+)
	Math.expm1(+all+)
	Math.floor(+all+)
	Math.fround(+all+)
	Math.hypot()
	Math.hypot(+all+)
	Math.hypot(%repeat%(+all+, ", "))
	Math.imul(+all+, +all+)
	Math.log(+all+)
	Math.log10(+all+)
	Math.log1p(+all+)
	Math.log2(+all+)
	Math.max(+all+)
	Math.max(%repeat%(+all+, ", "))
	Math.min(+all+)
	Math.min(%repeat%(+all+, ", "))
	Math.pow(+all+, +all+)
	Math.random()
	Math.random(+all+)
	Math.round(+all+)
	Math.sign(+all+)
	Math.sin(+all+)
	Math.sinh(+all+)
	Math.sqrt(+all+)
	Math.tan(+all+)
	Math.tanh(+all+)
	Math.trunc(+all+)

RegExpInteractions :=
	+regexpObjectsExpr+.+RegExpPrototypeVariables+
	+regexpObjectsExpr+.+RegExpPrototypeMethods+
	+regexpObjectsExpr++RegExpSymbolMethods+
	+regexpObjectsExpr+.+allPrototypeMethods+
	+regexpObjectsExpr+[+smallUnsigned+] = +regexpObjects+.+allPrototypeMethods+
	+regexpObjectsExpr+[+smallUnsigned+].+allPrototypeMethods+
	+regexpObjectsExpr+[+smallUnsigned+] = +regexpObjects+[+smallUnsigned+].+allPrototypeMethods+
	+RegExpStaticVariables+

RegExpForLoopInteractions :=
	+regexpObjectsExpr+.+RegExpPrototypeVariables+
	+regexpObjectsExpr+.+RegExpPrototypeMethods+
	+regexpObjectsExpr++RegExpSymbolMethods+
	!regexp!.+arrayMethodsForLoop+
	!regexp![i] = !regexp!.+arrayMethodsForLoop+
	!regexp![i].+arrayMethodsForLoop+
	!regexp![i] = !regexp![i].+arrayMethodsForLoop+
	+RegExpStaticVariables+

NumberInteractions :=
	+NumberConstants+
	+NumberStaticMethods+
	+numberObjectsExpr+.+NumberPrototypeMethods+
	+numberObjectsExpr+.+allPrototypeMethods+
	+numberObjectsExpr+[+smallUnsigned+] = +numberObjects+.+allPrototypeMethods+
	+numberObjectsExpr+[+smallUnsigned+].+allPrototypeMethods+
	+numberObjectsExpr+[+smallUnsigned+] = +numberObjects+[+smallUnsigned+].+allPrototypeMethods+

NumberForLoopInteractions :=
	+NumberConstants+
	+NumberStaticMethods+
	+numberObjectsExpr+.+NumberPrototypeMethods+
	!num!.+arrayMethodsForLoop+
	!num![i] = !num!.+arrayMethodsForLoop+
	!num![i].+arrayMethodsForLoop+
	!num![i] = !num![i].+arrayMethodsForLoop+

SetInteractions :=
	+setsExpr+.+SetPrototypeMethods+
	+setsExpr+.+allPrototypeMethods+
	+setsExpr+[+smallUnsigned+] = +sets+.+allPrototypeMethods+
	+setsExpr+[+smallUnsigned+].+allPrototypeMethods+
	+setsExpr+[+smallUnsigned+] = +sets+[+smallUnsigned+].+allPrototypeMethods+

SetForLoopInteractions :=
	+setsExpr+.+SetPrototypeMethods+
	!set!.+arrayMethodsForLoop+
	!set![i] = !set!.+arrayMethodsForLoop+
	!set![i].+arrayMethodsForLoop+
	!set![i] = !set![i].+arrayMethodsForLoop+

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Random Array-like Operations ########
%%% ##############################################################################################
%%% ##############################################################################################

interestingIndices :=
	+smallUnsigned+

arrayLikeObjects :=
	+initializableObjects+
	+objectsExpr+
	+arraysExpr+

randomIndexInsertions :=
	+arrayLikeObjects+[+interestingIndices+] = +all+

interestingLengths :=
	+smallNumbers+
	+strings+
	+objectsExceptNumber+
	+arrays+

randomLengthChanges :=
	+arrayLikeObjects+.length = +interestingLengths+

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Random Object Operations ########
%%% ##############################################################################################
%%% ##############################################################################################
%%% https://www.ecma-international.org/ecma-262/#sec-well-known-symbols
interestingProperties :=
%%%	Symbol.asyncIterator
	Symbol.hasInstance
	Symbol.isConcatSpreadable
	Symbol.iterator
	Symbol.match
	Symbol.replace
	Symbol.search
	Symbol.split
	Symbol.toPrimitive
	Symbol.toStringTag
%%%	Symbol.unscopables

randomPropertySets :=
	+initializableObjects+["+propertyNames+"] = +all+
	+initializableObjects+[+interestingProperties+] = +all+

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Wrappers ########
%%% ##############################################################################################
%%% ##############################################################################################

initializableObjects :=
	!arr!
	!t_arr!
	!dv!
	!obj!
	!buf!
	!map!
	!regexp!
	!num!
	!set!
	!weakmap!

allPrototypeMethods :=
	+arrayMethods+
	+TypedArrayMethods+
	+DataViewMethods+
	+MapMethods+
	+RegExpPrototypeVariables+
	+ObjectPrototypeMethods+
	+ArrayBufferPrototypeMethods+
	+SetPrototypeMethods+
	+WeakMapMethods+

forLoopInit :=
	for (var i = 0; i < !arr!.length; i++) { !arr![i] = +all+; }
	for (var i = 0; i < !t_arr!.length; i++) { !t_arr![i] = +all+; }
	for (var i = 0; i < !dv!.length; i++) { !dv![i] = +all+; }
	for (var i = 0; i < !obj!.length; i++) { !obj![i] = +all+; }
	for (var i = 0; i < !buf!.length; i++) { !buf![i] = +all+; }
	for (var i = 0; i < !map!.length; i++) { !map![i] = +all+; }
	for (var i = 0; i < !regexp!.length; i++) { !regexp![i] = +all+; }
	for (var i = 0; i < !num!.length; i++) { !num![i] = +all+; }
	for (var i = 0; i < !set!.length; i++) { !set![i] = +all+; }
	for (var i = 0; i < !weakmap!.length; i++) { !weakmap![i] = +all+; }
	for (var i = 0; i < +smallUnsigned+; i++) { +initializableObjects+[i] = +all+; }

forInLoops :=
	for (var i in +initializableObjects+) { try { i.+allPrototypeMethods+; } catch (e) {} }
	for (var i in +objects+) { try { i.+allPrototypeMethods+; } catch (e) {} }
	for (var i in +arrays+) { try { i.+allPrototypeMethods+; } catch (e) {} }
	
forOfLoops :=
	for (var [i, j] of +initializableObjects+.entries()) { try { j.+allPrototypeMethods+; } catch(e) {}}
	for (var [i, j] of Object.entries(+initializableObjects+)) { try { j.+allPrototypeMethods+; } catch(e) {}}
	for (var i of +initializableObjects+.values()) { try { i.+allPrototypeMethods+; } catch(e) {}}
	for (var i of Object.values(+initializableObjects+)) { try { i.+allPrototypeMethods+; } catch(e) {}}
	for (var [i, j] of +objects+.entries()) { try { j.+allPrototypeMethods+; } catch(e) {}}
	for (var [i, j] of +arrays+.entries()) { try { j.+allPrototypeMethods+; } catch(e) {}}
	for (var [i, j] of Object.entries(+objects+)) { try { j.+allPrototypeMethods+; } catch(e) {}}
	for (var [i, j] of Object.entries(+arrays+)) { try { j.+allPrototypeMethods+; } catch(e) {}}
	for (var i of +objects+.values()) { try { i.+allPrototypeMethods+; } catch(e) {}}
	for (var i of +arrays+.values()) { try { i.+allPrototypeMethods+; } catch(e) {}}
	for (var i of Object.values(+objects+)) { try { i.+allPrototypeMethods+; } catch(e) {}}
	for (var i of Object.values(+arrays+)) { try { i.+allPrototypeMethods+; } catch(e) {}}

forLoops :=
	for (var i = 0; i < +smallUnsigned+; i++) { +forLoopInteractions+ }
	+forLoopInit+
	+forInLoops+
	+forOfLoops+

forLoopInteractions :=
	try { +ArrayForLoopInteractions+; } catch (e) {}
	try { +DataViewForLoopInteractions+; } catch (e) {}
	try { +ObjectForLoopInteractions+; } catch (e) {}
	try { +ReflectInteractions+; } catch (e) {}
	try { +TypedArrayForLoopInteractions+; } catch (e) {}
	try { +MapForLoopInteractions+; } catch (e) {}
	try { +MathInteractions+; } catch (e) {}
	try { +RegExpForLoopInteractions+; } catch (e) {}
	try { +ArrayBufferForLoopInteractions+; } catch (e) {}
	try { +NumberForLoopInteractions+; } catch (e) {}
	try { +SetForLoopInteractions+; } catch (e) {}
	try { +WeakMapForLoopInteractions+; } catch (e) {}

interactions :=
	+ArrayInteractions+;
	+DataViewInteractions+;
	+ObjectInteractions+;
	+ReflectInteractions+;
	+TypedArrayInteractions+;
	+MapInteractions+;
	+randomIndexInsertions+;
	+randomLengthChanges+;
	+randomPropertySets+;
	+MathInteractions+;
	+RegExpInteractions+;
	+ArrayBufferInteractions+;
	+SetInteractions+;
	+WeakMapInteractions+;

wrapper :=
	try { +interactions+ } catch (e) {}
	try { +forLoops+ } catch (e) {}

%%% ###########################################################################
%%% ###########################################################################
%%% ####### VARIABLE SECTION
%%% ####### Only assign variables in this section
%%% ####### For example: @var@ = 42;
%%% ###########################################################################
%%% ###########################################################################

%section% := variable

str :=
	try { var @str@ = +strings+; } catch (e) {}
	try { var @str@ = String.fromCharCode(+charCodes+); } catch (e) {}
	try { var @str@ = String.fromCodePoint(+codePoints+); } catch (e) {}

obj :=
	try { var @obj@ = {}; } catch (e) {}
	try { var @obj@ = {%repeat%("+propertyNames+": +all+, ", ")}; } catch (e) {}
	try { var @obj@ = new Object() } catch (e) {}
	try { var @obj@ = new Object(null) } catch (e) {}
	try { var @obj@ = new Object(undefined) } catch (e) {}
	try { var @obj@ = new Object(+objects+) } catch (e) {}
	try { var @obj@ = new Object(+arrays+) } catch (e) {}
	try { var @obj@ = Object.create(null); } catch (e) {}
	try { var @obj@ = Object.create(null, { %repeat%(+props+, ", ") }); } catch (e) {}
	try { var @obj@ = Object.create(null, { %repeat%("+propertyNames+": +descriptor+, ", ") }); } catch (e) {}
	try { var @obj@ = Object.create(+objects+, { %repeat%(+props+, ", ") }); } catch (e) {}
	try { var @obj@ = Object.create(+arrays+, { %repeat%(+props+, ", ") }); } catch (e) {}
	try { var @obj@ = Object.create(+objects+, { %repeat%("+propertyNames+": +descriptor+, ", ") }); } catch (e) {}
	try { var @obj@ = Object.create(+arrays+, { %repeat%("+propertyNames+": +descriptor+, ", ") }); } catch (e) {}
	try { var @obj@ = Object.create(!str!); } catch (e) {}
	try { var @obj@ = Object.create(!arr!); } catch (e) {}
	try { var @obj@ = Object.create(!t_arr!); } catch (e) {}
	try { var @obj@ = Object.create(!dv!); } catch (e) {}
	try { var @obj@ = Object.fromEntries(+maps+); } catch (e) {}

arr :=
	try { var @arr@ = new Array(+sizes+); } catch (e) {}
	try { var @arr@ = new Array(%repeat%(+unsigned+, ", ")); } catch (e) {}
	try { var @arr@ = new Array(%repeat%(+floats+, ", ")); } catch (e) {}
	try { var @arr@ = new Array(%repeat%(+all+, ", ")); } catch (e) {}
	try { var @arr@ = Array.of(%repeat%(+unsigned+, ", ")); } catch (e) {}
	try { var @arr@ = Array.of(%repeat%(+floats+, ", ")); } catch (e) {}
	try { var @arr@ = Array.of(%repeat%(+all+, ", ")); } catch (e) {}
	try { var @arr@ = Array.from([%repeat%(+unsigned+, ", ")]); } catch (e) {}
	try { var @arr@ = Array.from([%repeat%(+floats+, ", ")]); } catch (e) {}
	try { var @arr@ = Array.from([%repeat%(+all+, ", ")]); } catch (e) {}

t_arr :=
	try { var @t_arr@ = new +TypedArrayNames+(+sizes+); } catch (e) {}
	try { var @t_arr@ = new +TypedArrayNames+(!buf!); } catch (e) {}
	try { var @t_arr@ = new +TypedArrayNames+(!buf!, +smallUnsigned+, +smallUnsigned+); } catch (e) {}
	try { var @t_arr@ = new +TypedArrayNames+(!arr!); } catch (e) {}
	try { var @t_arr@ = new +TypedArrayNames+(!obj!); } catch (e) {}
	try { var @t_arr@ = new +TypedArrayNames+(+objects+); } catch (e) {}
	try { var @t_arr@ = new +TypedArrayNames+(+arrays+); } catch (e) {}

buf :=
	try { var @buf@ = new ArrayBuffer(+sizes+); } catch (e) {}

dv :=
	try { var @dv@ = new DataView(!buf!); } catch (e) {}
	try { var @dv@ = new DataView(!buf!, +smallUnsigned+, +smallUnsigned+); } catch (e) {}

map :=
	try { var @map@ = new Map(+MapConstructorArguments+); } catch (e) {}

regexp :=
	try { var @regexp@ = new RegExp(+regexpStringArgs+); } catch (e) {}
	try { var @regexp@ = new RegExp(+regexpStringArgs+, "+regexpFlags+"); } catch (e) {}
	try { var @regexp@ = new RegExp(+all+); } catch (e) {}
	try { var @regexp@ = new RegExp(+all+, "+regexpFlags+"); } catch (e) {}
	try { var @regexp@ = new RegExp(+all+, +all+); } catch (e) {}
%%%	try { var @regexp@ = new RegExp(+regexpLiteralArgs+); } catch (e) {}
%%%	try { var @regexp@ = new RegExp(+regexpLiteralArgs+, "+regexpFlags+"); } catch (e) {}

num :=
	try { var @num@ = new Number(+numbers+); } catch (e) {}

set :=
	try { var @set@ = new Set(+arrays+); } catch (e) {}
	try { var @set@ = new Set(+objects+); } catch (e) {}

weakmap :=
	try { var @weakmap@ = new WeakMap(+WeakMapConstructorArguments+); } catch (e) {}

%%% ###########################################################################
%%% ###########################################################################
%%% ####### VARIANCE SECTION
%%% ###########################################################################
%%% ###########################################################################

%section% := variance

main :=
	+wrapper+
