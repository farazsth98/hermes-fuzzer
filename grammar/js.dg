%%% ## Author: Syed Faraz Abrar
%%% ## Twitter: https://twitter.com/farazsth98
%%% ## Description: Grammar for fuzzing JavaScript

%const% MAX_REPEAT_POWER := 2
%const% VARIANCE_MIN := 50
%const% VARIANCE_MAX := 100
%const% VARIABLE_MIN := 1
%const% VARIABLE_MAX := 1

%%% ###########################################################################
%%% ###########################################################################
%%% ####### VALUE SECTION
%%% ####### Only define values here
%%% ####### Use and assign value in declarations as follows: +value+
%%% ####### Use variables in statements as follows: !variable!.bar();
%%% ###########################################################################
%%% ###########################################################################

%section% := value

%%% ######## Generic Values ########

integers :=
	%range%(-64-64)

unsigned := 
	%range%(0-64)

floats :=
	%range%(-64.0-64.0)

strings :=
	%range%(a-z)
	%range%(A-Z)
	%range%(0-9)
	%repeat%(+strings+)

booleans :=
	true
	false

all :=
	+integers+
	+floats+
	"+strings+"
	+booleans+
	{}
	[]
	{'a':+integers+}
	!str!
	!obj!
	!arr!
	+others+

others :=
	NaN
	undefined
	null

sizes :=
	%range%(0-64)

charCodes :=
	0x%range%(0x0-0xff)
	+charCodes+, +charCodes+

codePoints :=
	%range%(0-999999)

twoIntArgs :=
	%range%(0-64), %range%(0-64)

threeIntArgs :=
	%range%(0-64), %range%(0-64), %range%(0-64)
	
twoFloatArgs :=
	%range%(0.0-64.0), %range%(0.0-64.0)

threeFloatArgs :=
	%range%(0.0-64.0), %range%(0.0-64.0), %range%(0.0-64.0)

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Functions ########
%%% ##############################################################################################
%%% ##############################################################################################

genericEmptyFunc :=
	function() {}

%%% TODO: Fix this after adding +JSArrayInteractions+
genericFuncThreeArgs :=
	function(c_val, c_index, c_array) { c_array[c_index] = c_array.+arrayMethods+ }

genericFuncOneArgCmp :=
	function(element => element < +unsigned+)
	function(element => element <= +unsigned+)
	function(element => element >= +unsigned+)
	function(element => element > +unsigned+)

genericFuncTwoArgCmp :=
	function(c_first, c_second) { c_first < c_second; }
	function(c_first, c_second) { c_first <= c_second; }
	function(c_first, c_second) { c_first >= c_second; }
	function(c_first, c_second) { c_first > c_second; }

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## JSArrays ########
%%% ## https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array ##
%%% ##############################################################################################
%%% ##############################################################################################

arrayMethods :=
	+JSArrayCallbackMethod+
	+JSArrayInPlaceMethod+
	+JSArrayForLoopUnsafe+

arrayMethodsForLoop :=
	+JSArrayCallbackMethod+
	+JSArrayInPlaceMethod+

%%% ######## Methods with callbacks ########

JSArrayCallbackMethod :=
%%%	+every+
	+filter+
%%%	+find+
%%%	+findIndex+
%%%	+flatMap+
%%%	+forEach+
	+map+
%%%	+reduce+
%%%	+reduceRight+
%%%	+some+
	+sort+

%%% TODO: All callback functions can have three arguments, so all of these interactions need to be
%%%       accounted for in the callback methods here

filter :=
	filter()
	filter(+genericEmptyFunc+)
	filter(+genericOneArgCmp+)

map :=
	map(+genericEmptyFunc+)
	map(+genericFuncThreeArgs+)

sort :=
	sort()
	sort(+genericEmptyFunc+)
	sort(+genericFuncTwoArgCmp+)
	
%%% ######## Methods that occur in-place ########

JSArrayForLoopUnsafe :=
	+push+
	+splice+
	+unshift+
	+concat+

JSArrayInPlaceMethod :=
	+copyWithin+
	+entries+
	+fill+
	+flat+
	+includes+
	+indexOf+
	+join+
	+keys+
	+lastIndexOf+
	+pop+
	+reverse+
	+shift+
	+slice+
%%%	+toLocaleString+
	+toString+
%%%	+values+

concat :=
	concat()
	concat(!arr!)
	concat(!obj!)

copyWithin :=
	copyWithin(+twoIntArgs+)
	copyWithin(+threeIntArgs+)

flat :=
	flat()
	flat(+all+)

entries :=
	entries()
	entries(%repeat%(+all+, ", "))

fill :=
	fill(+all+)
	fill(+all+, +twoIntArgs+)

includes :=
	includes(+all+)
	includes(+all+, +unsigned+)

indexOf :=
	indexOf(+all+)
	indexOf(+all+, +unsigned+)

join :=
	join()
	join(+all+)

keys :=
	keys()
	keys(%repeat%(+all+, ", "))

lastIndexOf :=
	lastIndexOf(+all+)
	lastIndexOf(+all+, +unsigned+)

pop :=
	pop()
	pop(%repeat%(+all+, ", "))

push :=
	push()
	push(%repeat%(+all+, ", "))

reverse :=
	reverse()
	reverse(%repeat%(+all+, ", "))

shift :=
	shift()
	shift(%repeat%(+all+, ", "))

slice :=
	slice()
	slice(+unsigned+)
	slice(+unsigned+, +unsigned+)

splice :=
	splice()
	splice(+unsigned+)
	splice(+unsigned+, +unsigned+)
	splice(+unsigned+, +unsigned+, %repeat%(+all+, ", "))

toString :=
	toString()
	toString(%repeat%(+all+, ", "))

unshift :=
	unshift()
	unshift(%repeat%(+all+, ", "))

values :=
	values()
	values(%repeat%(+all+, ", "))

%%% TODO: Add +JSArrayInteractions+
	
%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## DataViews ########
%%% ### https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView
%%% ##############################################################################################
%%% ##############################################################################################

DataViewSetArgs :=
	+booleans+
	+integers+
	+floats+
	+all+

DataViewGetMethods :=
    getFloat32
    getFloat64
    getInt16
    getInt32
    getInt8
    getUint16
    getUint32
    getUint8

DataViewSetMethods :=
    setFloat32
    setFloat64
    setInt16
    setInt32
    setInt8
    setUint16
    setUint32
    setUint8

DataViewMethods :=
	+DataViewGetMethods+(%range%(0-4), +booleans+)
	+DataViewGetMethods+(%range%(0-4), +booleans+)
	+DataViewSetMethods+(%range%(0-4), +DataViewSetArgs+, +booleans+)
	+DataViewSetMethods+(%range%(0-4), +DataViewSetArgs+, +others+)

DataViewInteractions :=
	!dv!.+DataViewMethods+
	!dv![i] = !dv!.+DataViewMethods+
	!dv!.+arrayMethods+
	!dv![i] = !dv!.+arrayMethods+

DataViewForLoopInteractions :=
	!dv!.+DataViewMethods+
	!dv![i] = !dv!.+DataViewMethods+
	!dv!.+arrayMethodsForLoop+
	!dv![i] = !dv!.+arrayMethodsForLoop+

%%% ##############################################################################################
%%% ##############################################################################################
%%% ######## Wrappers ########
%%% ##############################################################################################
%%% ##############################################################################################

initializableObjects :=
	!dv!
	!obj!
	+arrays+

forLoopInit :=
	for (var i = 0; i < !arr!.length; i++) { !arr![i] = +all+; }
	for (var i = 0; i < !e_arr!.length; i++) { !e_arr![i] = +all+; }
	for (var i = 0; i < !t_arr!.length; i++) { !t_arr![i] = +all+; }
	for (var i = 0; i < !dv!.length; i++) { !dv![i] = +all+; }
	for (var i = 0; i < !obj!.length; i++) { !obj![i] = +all+; }
	for (var i = 0; i < +unsigned+; i++) { +initializableObjects+[i] = +all+; }

forLoops :=
	for (var i = 0; i < +unsigned+; i++) { !arr![i] = !arr!.+interactions+ }
	for (var i = 0; i < +unsigned+; i++) { !arr![i] = !arr![i].+interactions+ }
	for (var i = 0; i < +unsigned+; i++) { !e_arr![i] = !e_arr!.+interactions+ }
	for (var i = 0; i < +unsigned+; i++) { !e_arr![i] = !e_arr![i].+interactions+ }
	for (var i = 0; i < +unsigned+; i++) { !t_arr![i] = !t_arr!.+interactions+ }
	for (var i = 0; i < +unsigned+; i++) { !t_arr![i] = !t_arr![i].+interactions+ }
	for (var i = 0; i < +unsigned+; i++) { !obj![i] = !obj!.+interactions+ }
	for (var i = 0; i < +unsigned+; i++) { !obj![i] = !obj![i].+interactions+ }
	for (var i = 0; i < +unsigned+; i++) { !dv![i] = !dv!.+interactions+ }
	for (var i = 0; i < +unsigned+; i++) { !dv![i] = !dv![i].+interactions+ }
	for (var i = 0; i < !arr!.length; i++) { !arr![i] = !arr!.+arrayMethodsForLoop+; }
	+forLoopInit+

arrays :=
	!arr!
	!e_arr!
	!t_arr!

interactions :=
	+arrays+.+arrayMethods+;
	+DataViewInteractions+;
	!obj!.+arrayMethods+;

wrapper :=
	try { +interactions+ } catch (e) {}
	try { +forLoops+ } catch (e) {}

%%% ###########################################################################
%%% ###########################################################################
%%% ####### VARIABLE SECTION
%%% ####### Only assign variables in this section
%%% ####### For example: @var@ = 42;
%%% ###########################################################################
%%% ###########################################################################

%section% := variable

str :=
	try { var @str@ = "+strings+"; } catch (e) {}
	try { var @str@ = String.fromCharCode(+charCodes+); } catch (e) {}
	try { var @str@ = String.fromCodePoint(+codePoints+); } catch (e) {}

obj :=
	try { var @obj@ = {}; } catch (e) {}
	try { var @obj@ = Object.create(null); } catch (e) {}
	try { var @obj@ = Object.create(!obj!); } catch (e) {}

arr :=
	try { var @arr@ = new Array(%repeat%(+floats+, ", ")); } catch (e) {}
	try { var @arr@ = new Array(%repeat%(+all+, ", ")); } catch (e) {}
	try { var @arr@ = Array.of(%repeat%(+unsigned+, ", ")); } catch (e) {}
	try { var @arr@ = Array.of(%repeat%(+floats+, ", ")); } catch (e) {}
	try { var @arr@ = Array.of(%repeat%(+all+, ", ")); } catch (e) {}

e_arr :=
	try { var @e_arr@ = new Array(+sizes+); } catch (e) {}

t_arr :=
	try { var @t_arr@ = new Int8Array(+sizes+); } catch (e) {}
	try { var @t_arr@ = new Uint8Array(+sizes+); } catch (e) {}
	try { var @t_arr@ = new Uint8ClampedArray(+sizes+); } catch (e) {}
	try { var @t_arr@ = new Int16Array(+sizes+); } catch (e) {}
	try { var @t_arr@ = new Uint16Array(+sizes+); } catch (e) {}
	try { var @t_arr@ = new Int32Array(+sizes+); } catch (e) {}
	try { var @t_arr@ = new Uint32Array(+sizes+); } catch (e) {}
	try { var @t_arr@ = new Float32Array(+sizes+); } catch (e) {}
	try { var @t_arr@ = new Float64Array(+sizes+); } catch (e) {}
	try { var @t_arr@ = new Int8Array(!buf!); } catch (e) {}
	try { var @t_arr@ = new Uint8Array(!buf!); } catch (e) {}
	try { var @t_arr@ = new Uint8ClampedArray(!buf!); } catch (e) {}
	try { var @t_arr@ = new Int16Array(!buf!); } catch (e) {}
	try { var @t_arr@ = new Uint16Array(!buf!); } catch (e) {}
	try { var @t_arr@ = new Int32Array(!buf!); } catch (e) {}
	try { var @t_arr@ = new Uint32Array(!buf!); } catch (e) {}
	try { var @t_arr@ = new Float32Array(!buf!); } catch (e) {}
	try { var @t_arr@ = new Float64Array(!buf!); } catch (e) {}

buf :=
	try { var @buf@ = new ArrayBuffer(+sizes+); } catch (e) {}

dv :=
	try { var @dv@ = new DataView(!buf!); } catch (e) {}
	try { var @dv@ = new DataView(!buf!, +unsigned+, +unsigned+); } catch (e) {}

iter :=
	try { var @iter@ = +initializableObjects+.entries(); } catch (e) {}
	try { var @iter@ = +initializableObjects+.keys(); } catch (e) {}
	try { var @iter@ = +initializableObjects+.values(); } catch (e) {}

%%% ###########################################################################
%%% ###########################################################################
%%% ####### VARIANCE SECTION
%%% ###########################################################################
%%% ###########################################################################

%section% := variance

main :=
	+forLoops+
	+interactions+
